;
; Kernel 1
;  from ARM V0.01 FOR KOM980
;  Jul.1984
; Modefyed Sep.1984 for MINI-DOS V0.9
;          Oct.1984 for MINI-DOS V0.95
;DEBUG     Oct.1984              V0.96
;DEBUG     Nov.1984              V0.97 
;             (ERR in SRESET for WRFAT
;              CIFCB reset when BREAK-STOP key)
;EXTEND    Nov.1984              V0.98
;              INTERRUPT CONTROLE & SENKOU-ENTER)
;            V0.98 was not fixed.(not exist)
;EXTEND    Nov.1984              V0.99
;              EXPAND FOR MORE PERFECT 'DOS'
;EXTEND    Dec.1984              V0.9A
;              ADD DATETIME function
;EXTEND and DEBUG   Dec.1984              V0.9B
;              ADD MORE HOOKS
;DEBUG     Dec.1984              V0.9C
;              CURRENT DRIVE IS 0-BASE
;EXTEND    Jan.1985              V0.A6
;              USE WITH senko.exp V1.1
;EXTEND    Feb.1985              V0.A7
;              ADD HOOKS AND MANY KIND OF EXPAND
;EXTEND    Feb.1985              V0.A8
;              ADD HOOK AND MAKFCB("*"is OK!)
;EXTEND    FeB.1985              V0.B
;              ADD RAW MODE AND SO
;EXTEND    May.1985              V0.B1(.H)
;              USE OF HIDDEN DRIVE
;EXTEND    Jul.1985              V0.C
;              X1 VERSION OK!
;
; by Aki
;
;
KEEPREG	EQU	SYWORK_END-26
SCKEEP	EQU	KEEPREG
TPKEEP	EQU	KEEPREG+2
SPKEEP	EQU	KEEPREG+4
IHKEEP	EQU	KEEPREG+6
IDKEEP	EQU	KEEPREG+8
IBKEEP	EQU	KEEPREG+10
IAKEEP	EQU	KEEPREG+12
IYKEEP	EQU	KEEPREG+14
IXKEEP	EQU	KEEPREG+16
HLKEEP	EQU	KEEPREG+18
DEKEEP	EQU	KEEPREG+20
BCKEEP	EQU	KEEPREG+22
AFKEEP	EQU	KEEPREG+24
;
KEPBOT	EQU	KEEPREG+26
;
SITBL:
	DEFW	0
	DEFB	5		;+3
	JP	ZEROVECT	;WARM
	IF	DEBUG
	DEFB	0,1
	ELSE
	DEFB	0,0		;I/OBYTE & CUR-DRIVE
	ENDIF
; JP DOSFROM
;
	DEFW	8
	DEFB	3
	JP	VBASIC
	DEFW	$10
	DEFB	3
	JP	VBREAK
	DEFW	$18
	DEFB	3
	JP	CONOUT
	DEFW	$20
	DEFB	3
	IF	PC8X
	JP	CALSUB
	ENDIF
	IF	X1
	JP	VBREAK
	ENDIF
	DEFW	$28
	DEFB	3
	JP	SRVENT
	DEFW	$30
	DEFB	3
	JP	VBREAK
	DEFW	$38
	DEFB	3
	JP	VBREAK
	IF	X1
	DEFW	$66
	DEFB	3
	JP	$66
	ENDIF
;
	DEFW	WARM
	DEFB	3
	JP	DOSCMD
;
	IF	PC8X
;"before NBASIC command
	DEFW	$F16E
	DEFB	3
	IF	HIDDEN
	JP	$F16E		;FOREVER LOOP!
	ELSE
	JP	SYWORK
	ENDIF
;
	DEFW	$F1B0
	DEFB	3
	IF	HIDDEN
	JP	$F1B0
	ELSE
	JP	REINIT
	ENDIF
;
	DEFW	$F1DA
	DEFB	12
	JP	CALSUB
	JP	SYWORK
	JP	SYWORK
	JP	SYWORK
	DEFW	$F156
	DEFB	3
	JP	SYWORK
;
	DEFW	SYWORK
	DEFB	6
	ROMCALL	$C9
	JP	DOSENT
REINIT	EQU	SYWORK+6
	DEFW	REINIT
	DEFB	6
	ROMCALL	$C9
	JP	DOSENT2
;
	IF	0
	DEFW	$FF40
	DEFB	7
	LD	A,$80
	OUT	($78),A
	JP	DOSENT
	ENDIF
;
;
CALSUB	EQU	REINIT+6
;
	DEFW	CALSUB
	DEFB	$1C
	EX	(SP),HL		;0
	PUSH	DE		;1
	LD	E,(HL)		;2
	INC	HL		;3
	LD	D,(HL)		;4
	INC	HL		;5
	LD	(CALSUB+$13),DE	;6
	POP	DE		;10
	EX	(SP),HL		;11
	PUSH	AF		;12
	LD	A,0		;13
	OUT	($78),A		;15
	POP	AF		;17
	CALL	$81		;18
	PUSH	AF		;21
	LD	A,$80		;22
	OUT	($78),A		;24
	POP	AF		;26
	RET			;27
;
WORKS:	EQU	CALSUB+$1C
;
	ENDIF
;
	DEFW	$FFFF
;
	IF	X1
WORKS	EQU	SYWORK
	ENDIF
;
CMTFCB:	EQU	WORKS
FNMBUF:	EQU	WORKS+15
SOME	EQU	FNMBUF+33
CMTFLG:	EQU	SOME+1
CURADR:	EQU	CMTFLG+1
CURFCB:	EQU	CURADR+2
VERFLG:	EQU	CURFCB+2
ZURFLG:	EQU	VERFLG+1
LOCKEP:	EQU	ZURFLG+1
KEP2:	EQU	LOCKEP+2
SUBKEEP:	EQU	KEP2+2
SHIFTLAFLG	EQU	SUBKEEP+2
LA	EQU	SHIFTLAFLG+1
DECBUF	EQU	LA+2
LASTADRS	EQU	DECBUF+5
LASTFAT	EQU	LASTADRS+2
LASTCODE	EQU	LASTFAT+1
DFNFLG	EQU	LASTCODE+1
STOPMODE	EQU	DFNFLG+1
RAWMODE	EQU	STOPMODE+1
;
;WK:EQU RAWMODE+1
;
;
VBASIC:	
	IF	PC8X
;"Hook cut off
	LD	A,$C9
	LD	($F16E),A
	LD	($F1B0),A
	ROMCALL	$81
;"Never Return
	ENDIF
	IF	X1
	JP	VBREAK
	ENDIF
;
SRVENT:	CALL	SRVENT_HOOK
	EX	(SP),HL
	PUSH	DE
	PUSH	AF
	LD	A,(HL)
	INC	HL
	CALL	SRVEXP_HOOK
	CP	16
	JR	C,SEN10
	SUB	16
	CP	16
	JR	C,SENCON
;
SEN10:	PUSH	HL
	LD	L,A
	LD	H,0
	ADD	HL,HL
	LD	DE,SRVTBL
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	DI
	LD	(WK),DE
	POP	HL
	POP	AF
	POP	DE
	EX	(SP),HL
	PUSH	HL
	LD	HL,(WK)
	EI
	EX	(SP),HL
	RET
;
SENCON:	LD	(XWK),IX
	LD	IX,(COFCB)
	CP	3
	JR	NC,SENC10
	LD	IX,(CIFCB)
SENC10:	ADD	32
	CP	37
	JR	Z,SENNXT
	LD	(KINDAN),A
	POP	AF
	POP	DE
	EX	(SP),HL
	RST	$28
KINDAN:	DEFB	0
	LD	IX,(XWK)
	RET
;
SENNXT:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,SENX10
	CALL	SPUTCHR
	JR	SENNXT
SENX10:	POP	AF
	POP	DE
	EX	(SP),HL
	LD	IX,(XWK)
	RET
;
SRVTBL:	DEFW	DOSENT
	DEFW	WARM
	DEFW	SCHAIN
	DEFW	SALOMAP
	DEFW	SRESET
	DEFW	SOPEN
	DEFW	SCLOSE
	DEFW	SCIFCB
	DEFW	SCOFCB
	DEFW	SDATETIME
	DEFW	SSCHFST
	DEFW	SSCHNXT
	DEFW	SMAKFCB
	DEFW	SERASE
	DEFW	SRENAME
	DEFW	SDSKFRE
;
	DEFW	SGETCHR
	DEFW	SGETLIN
	DEFW	SGETSCN
	DEFW	SPUTCHR
	DEFW	SPUTSTR
	DEFW	SPUTNXT
	DEFW	SPUTSPC
	DEFW	SPUTCRLF
	DEFW	SPUTDEC
	DEFW	SPUT4HEX
	DEFW	SPUT2HEX
	DEFW	SPUTDIR
	DEFW	SRVERR
	DEFW	SRVERR
	DEFW	SRVERR
	DEFW	SRVERR
;
	DEFW	SGETBLK
	DEFW	SPUTBLK
	DEFW	SRESTORE
	DEFW	SSENSE
	DEFW	SSTPESC
	DEFW	STEXTINI
	DEFW	STEXTCUR
	DEFW	STEXTCOL
	DEFW	SBEEPON
	DEFW	SBEEPOF
	DEFW	SBELL
	DEFW	SWAIT
	DEFW	SDISKIO
	DEFW	SSETBUF
	DEFW	SLOC
	DEFW	SSUBSRV
;
SSUBSRV:
	CALL	SUBSRV_HOOK
	CP	$80
	JR	NZ,SSRV10
	LD	A,$FF
	RET
SSRV10:	OR	A
	PUSH	AF
	AND	%0111$1110
	CP	2
	JR	Z,SETSTPESC
	CP	4
	JR	Z,SETRAWMODE
	CP	6
	JP	Z,CHANGEATTR
	CP	8
	JP	Z,REINITS_CALL
	JP	SRVERR
;
SETSTPESC:	
	POP	AF
	JP	M,READSTPESC
	AND	1
	LD	(STOPMODE),A
	RET
;
READSTPESC:	
	LD	A,(STOPMODE)
	RET
;
SETRAWMODE:	
	POP	AF
	JP	M,READRAWMODE
	AND	1
	LD	(RAWMODE),A
	RET
;
READRAWMODE:	
	LD	A,(RAWMODE)
	RET
;
REINITS_CALL:	
	POP	AF
	JP	REINITS
;
;
;
SDATETIME:	
	OR	A
	JR	Z,READTIME
	DEC	A
	JR	Z,SETTIME
	JP	SRVERR
;
READTIME:	
	IF	PC8X
	KEEP	HL,DE,BC
	PUSH	HL
	ROMCALL	$1602		;TIME READ SUB
	LD	A,($EA7A)	;TSUKI
	CP	10
	JR	C,RDTIM10
	ADD	A,0-10+$10
	LD	($EA7A),A
RDTIM10:
	LD	HL,$EA76	;DATETIME_BUFFER TOP
	POP	DE
	LD	BC,6
	LDIR
	KEEPOUT
	RET
;
	ENDIF
;
	IF	X1
	KEEP	HL,DE,BC
	PUSH	HL
	LD	DE,6
	ADD	HL,DE
	LD	A,$EE		;READ DATE
	CALL	TRNS49
	CALL	RECV49
	LD	(-HL),A
	CALL	RECV49
	RRA
	RRA
	RRA
	RRA
	AND	$F
	CP	10
	JR	C,RDTIM10
	ADD	A,0-10+$10
RDTIM10:
	LD	(-HL),A
	CALL	RECV49
	LD	(-HL),A
	LD	A,$EF		;READ TIME
	CALL	TRNS49
	LOOP	B,3
	CALL	RECV49
	LD	(-HL),A
	LEND
	KEEPOUT
	RET	
;
	ENDIF
;
;
SETTIME:	
	IF	PC8X
	KEEP	HL,DE,BC
	LD	DE,$EA76	;DATETIME_BUFFER TOP
	LD	BC,6
	LDIR
	LD	A,($EA7A)	;TSUKI
	CP	$10
	JR	C,SETTM10
	ADD	A,0-$10+10
	LD	($EA7A),A
SETTM10:	
	ROMCALL	$1663		;TIME SET SUB
	KEEPOUT
	RET
	ENDIF
;
	IF	X1
	KEEP	HL,DE,BC
	LD	DE,DTBUF
	LD	BC,6
	LDIR
	EX	DE,HL		;DTBUF BOTTOM->HL
	LD	A,(DTBUF+4)
	CP	$10
	JR	C,SETTM10
	ADD	A,0-$10+10
SETTM10:	
	RLA
	RLA
	RLA
	RLA
	AND	$F0
	OR	$07
	LD	(DTBUF+4),A
	LD	E,$EC		;SET DATE
	LOOP	B,3
	LD	A,(-HL)
	CALL	TRNS49
	LEND
	LD	E,$ED		;SET TIME
	LOOP	B,3
	LD	A,(-HL)
	CALL	TRNS49
	LEND
	KEEPOUT
	RET
;
DTBUF:	DB	6
	ENDIF
;
SCHAIN:	LD	DE,LINBUF
	PUSH	DE
	LD	BC,255
	LDIR
	POP	HL
	JP	CHAIN_CMD
;
SRESET:	CALL	RESET_HOOK
	KEEP	HL,BC,AF,IX
	IF	PC8X
	LD	A,$FF
	LD	($EDC9),A
	XOR	A
	LD	(ERRCNT),A
	ENDIF
;
	LD	IX,CFCB
	LD	HL,FATFLG
	LD	A,(DRVMAX)	;(DRIVES)
	LD	B,A
	LD	C,1		; LD C,0
SRES10:	LD	(IX+0),C	; LD (DRVNO),A
	CALL	FFLGAD
	LD	A,(HL)
	OR	A
	CALL	NZ,WRFAT
	INC	C
	DJNZ	SRES10
	LD	HL,0
	LD	(FATFLG),HL
	LD	(FATFLG+2),HL
	LD	IX,(CIFCB)
	LD	(IX+0),$F0	;CONSOLE INPUT IS FROM CONSOLE
	LD	IX,(COFCB)
	LD	(IX+0),$F0	;CONSOLE OUTPUT IS TO CONSOLE
	KEEPOUT
	RET
;
SOPEN:	LD	(IX+MODE),A
	LD	(IX+BFTL),L
	LD	(IX+BFTH),H
	LD	(IX+BFS),B
	LD	(IX+SCC),0
	KEEP	DE
	CALL	NSCCOM
	KEEPOUT
	LD	A,(IX+0)
	OR	A
	JR	NZ,SOPEN1
	LD	A,(4)
	INC	A
	LD	(IX+0),A
SOPEN1:	LD	A,(IX+MODE)
	AND	2
	JP	NZ,XOPEN
	LD	A,(IX+MODE)
	AND	1
	JP	Z,RDOPEN
	JP	WROPEN
;
SCLOSE:	KEEP	AF,BC
	CALL	SCLOSE0
	KEEPOUT
	RET
SCLOSE0:
	LD	A,(IX+MODE)
	LD	B,A
	AND	2
	JP	NZ,XCLOS
	LD	A,B
	AND	1
	JP	Z,RDCLOS
	JP	WRCLOS
;
SCIFCB:	LD	IX,(CIFCB)
	RET
;
SCOFCB:	LD	IX,(COFCB)
	RET
;
;
SSCHFST:
	CALL	SCHFST_HOOK
	CALL	RESDRV
	JR	SSCH_COM
SSCHNXT:	
	CALL	SCHNXT_HOOK
SSCH_COM:	
	CALL	SCHDIR
	RET	C
	KEEP	IX
	PUSH	IY
	POP	IX
	CALL	CLRFCB
	CALL	TOFCB
	KEEPOUT
	LD	A,(IX+0)
	LD	(IY+0),A
	LD	A,(IX+ATRB)
	LD	(IY+ATRB),A
	CALL	FILESIZE
	LD	(IX+FSIZEL),C
	LD	(IX+FSIZEH),B
	OR	A
	RET
;
;
SMAKFCB	EQU	MAKFCB
;
SERASE:	CALL	ERASE_HOOK
	KEEP	HL,IY
	CALL	SCHONE
	JR	C,SEREE
	PUSH	HL
	POP	IY
	LD	A,(IY+9)
	LD	(IX+ATRB),A
	AND	$10
	JP	NZ,PRTERR
	LD	(HL),0
	CALL	ERASEF
	CALL	RESTDIR
	CALL	WRFAT
	OR	A
SEREE:	KEEPOUT
	RET
;
;"input IX:srcFCB,IY:dstFCB
SRENAME:
	CALL	RENAME_HOOK
	KEEP	IY,BC,HL
	LD	A,(IX+0)
	LD	(IY+0),A
	KEEP	IX
	PUSH	IY
	POP	IX
	CALL	SCHONE
	LD	A,1
	CCF
	KEEPOUT
	JP	C,SRENEE
	CALL	SCHONE
	LD	A,2
	JR	C,SRENEE
	KEEP	IY
	PUSH	HL
	POP	IY
	LD	A,(IY+9)
	LD	(IX+ATRB),A
	KEEPOUT
	AND	$10
	JP	NZ,PRTERR
	KEEP	IX
	PUSH	IY
	POP	IX
	CALL	TODIR
	KEEPOUT
	CALL	RESTDIR
	XOR	A
SRENEE:	KEEPOUT
	RET
;
CHANGEATTR:	
	POP	AF
	CALL	CHANGEATTR_HOOK
	KEEP	IY,BC,HL
	LD	A,(IX+ATRB)
	LD	B,A
	KEEP	BC
	CALL	SCHONE
	KEEPOUT
	JR	C,CHAE
	PUSH	HL
	POP	IY
	LD	(IY+9),B
	CALL	RESTDIR
	XOR	A
CHAE:	KEEPOUT
	RET
;
SDSKFRE:	
	CALL	DSKFRE_HOOK
	PUSH	AF
	LD	A,(IX+0)
	AND	$F0
	LD	HL,$FFFF
	JR	NZ,SDSKFEE
	CALL	SETDRV
	CALL	RDFAT
	CALL	FREECR
	LD	L,A
	LD	H,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
SDSKFEE:	POP	AF
	RET
;
;IX:FCB
SGETBLK:	PUSH	HL
	PUSH	DE
	PUSH	BC
	CALL	RDBLK
	POP	BC
	POP	DE
	POP	HL
	RET
;
;IX:FCB
SPUTBLK:
	KEEP	HL,DE,BC
	LD	A,(IX+ATRB)
	AND	$10
	JP	NZ,PRTERR
	LD	A,(IX+RCF)
	OR	A
	CALL	EXPRC		;OVER FILE SIZE THEN EXPAND
; CALL NZ,EXPRC ;OVER FILE SIZE THEN EXPAND
	CALL	WRBLK
	KEEPOUT
	RET
;
;
;IX:FCB
;HL:buffer address
SSETBUF:
	LD	(IX+BFTL),L
	LD	(IX+BFTH),H
	RET
;
;IX:FCB
;HL:record number
SRESTORE:	
	CALL	RESTORE_HOOK
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	(IX+RCL),L
	LD	(IX+RCH),H
	LD	C,L
	LD	B,H
	CALL	SETDRV
	LD	E,(IX+FCL)
	LD	D,0
	LD	A,B
	OR	C
	JR	Z,SRST30
SRST10:	LD	A,(IX+BFS)
	ADD	A,D
	DEC	BC
	LD	D,A
	CP	8
	JR	NZ,SRST20
	LD	D,0
	CALL	FATAD
	ADD	HL,DE
	LD	E,(HL)
	LD	D,0
	LD	A,E
	AND	$F0
	CP	$C0
	JR	Z,SRSTEE
SRST20:	LD	A,B
	OR	C
	JR	NZ,SRST10
SRST30:
	LD	(IX+NCL),E
	LD	(IX+SCC),D
	POP	BC
	POP	DE
	POP	HL
	XOR	A		;CY clear to OK
	LD	(IX+RCF),A
	RET
SRSTEE:	POP	BC
	POP	DE
	POP	HL
	SCF			;CY on to Not Exist the Record
	LD	A,$FF
	LD	(IX+RCF),A
	RET
;
;
STEXTCOL:
	LD	($EA5B),A
	RET
;
;"CRTC initialize
STEXTINI:	
	CALL	TEXTINI_HOOK
	CP	$FF
	JR	Z,READ_TEXT_MODE
;
	IF	PC8X
	KEEP	HL,DE,BC,AF
	OR	A
	JP	NZ,SRVERR
	LD	B,80
	LD	C,25
	ROMCALL	$93A
	LD	HL,CONMES
	LD	DE,CRTCBUF
	LD	BC,CMEEE-CONMES
	LDIR
	LD	HL,CRTCBUF
	ROMCALL	$884
	LD	A,32
	LD	(NULL),A
	LD	A,12
	CALL	CONOUT
	KEEPOUT
	RET
CONMES:	DEFB	"0,25,1,0",0
CMEEE:	
	ENDIF
;
	IF	X1
	KEEP	HL,DE,BC,AF
	LD	BC,$1A03
	LD	A,%0000$1100
	OUT	(C),A
;
; CHECK TURBO HIRES MODE
	LD	BC,$37D0
	LD	DE,$E55A
	OUT	(C),D
	SET	3,B
	OUT	(C),E
	LD	BC,$37D0
	IN	E,(C)
	SET	3,B
	IN	A,(C)
	LD	HL,CRTC_DATA
	CP	E
	JR	Z,TXI100	;IT'S NOT X1TURBO
;  CASE OF TURBO
;
	LD	BC,$1FF0
	IN	A,(C)
	AND	1
	JR	NZ,TXI100
; CASE OF TURBO & HIRES
	LD	HL,CRTC_DATA_H
TXI100:	
;
; INIT CRTC
	LD	D,0
	LOOP	E,12
	LD	BC,$1800
	OUT	(C),D
	INC	BC
	LD	A,(HL+)
	OUT	(C),A
	INC	D
	LEND
;
	LD	A,(HL)
	OUT	(C),A
;
	LD	A,12
	CALL	CONOUT
;
	KEEPOUT
	RET
;
; 640x200GRP,80x25CHR,LOW RES
CRTC_DATA:	
	DB	$6F,$50,$59,$38,$1F,$02,$19,$1C,$00,$07,0,0,0
CRTC_DATA_H:	
	DB	$6B,$50,$59,$88,$1B,$00,$19,$1A,$00,$0F,0,0,3
;
	ENDIF
;
;
READ_TEXT_MODE:	
	XOR	A
	RET
;
SDISKIO:	
	KEEP	AF
	CALL	SETDRV
	KEEPOUT
;
	JP	C,WRSEC
	JP	NZ,RDSEC
	JP	VRSEC
;
PRCHR:	SRV	CPRCHR
	RET
;
SGETCHR	EQU	RDCHR
;
CONIN:	CALL	CONIN_HOOK
	IF	PC8X
;
CONIN0:	KEEP	HL,BC
CONIN0_0:	
	LD	A,$FF
	LD	($EA59),A
	ROMCALL	$3A6
	LD	A,($EA6B)
	LD	B,A
CONIN0_1:	
	KEEP	BC
	ROMCALL	$FAC
	KEEPOUT
	JR	C,CONIN0_3
	JR	NZ,CONIN0_2
	DJNZ	CONIN0_1
	KEEP	AF
	LD	A,1
	LD	($EA6B),A
	KEEPOUT
CONIN0_2:	
	KEEPOUT
	RET
CONIN0_3:	KEEP	AF
	LD	A,$30
	LD	($EA6B),A
	KEEPOUT
	JR	CONIN0_0
;
	ENDIF
;
	IF	X1
;
	KEEP	HL
	CALL	CURON
RECONIN:	
	LD	HL,(LASTCHR)
	LD	A,L
	OR	A
	JR	Z,RECONIN
	LD	A,L
	LD	HL,0
	LD	(LASTCHR),HL
	CALL	CUROFF
        KEEPOUT
	RET
;
LASTCHR:	DW	0
;
KEY_INT:	
	KEEP	HL,AF
	CALL	RECV49I
	LD	H,A
	CALL	RECV49I
	LD	L,A
	CP	$40		;ENABLE TEN KEY WHEN FUNCTION etc.
	JR	C,KINT10
;
	LD	A,H		;FUNCTION etc. KEY?
	AND	$80
	JR	Z,KINT20
;
KINT10:	LD	(LASTCHR),HL
KINT20:	KEEPOUT
	EI
	RETI
;
	ENDIF
;
SPUTCHR	EQU	WRCHR
;
CONOUT:	CALL	CONOUT_HOOK
	IF	PC8X
	DI
	CP	12
	JR	Z,CONOUT_CLS
	KEEP	AF
	XOR	A		;NEW LINE CLEAR
	LD	($EA57),A	;   ALWAYS OFF
	KEEPOUT
	ROMCALL	$18
        RET
;
CONOUT_CLS:	
	KEEP	AF,BC,DE,HL
	ROMCALL	$45A
	KEEPOUT
	EI
	RET
	ENDIF
	IF	X1
	JP	CONOUT0
	ENDIF
;
;
LPTOUT:	CALL	LPTOUT_HOOK
	IF	PC8X
	ROMCALL	$D60
	RET
	ENDIF
	IF	X1
	JP	ILLMOD
	ENDIF
;
SENSE:	
SSENSE:	CALL	SENSE_HOOK
	IF	PC8X
	PUSH	BC
	ROMCALL	$CF1
	POP	BC
	LD	A,0
	RET	Z		;NOT PUSHED
	LD	A,3
	RET	C
	LD	A,27
	RET
	ENDIF
	IF	X1
	CALL	KEYSCN
	CP	27
	RET	Z
	CP	3
	RET	Z
	XOR	A
	RET
	ENDIF
;
DO_STPESC:	
	SRV	52		;STPESC
	RET
;
SSTPESC:
	PUSH	AF
	CALL	SENSE
	OR	A
	JR	Z,VSTP30
	CP	3
	JP	Z,VSTPEX
VSTP10:	CALL	KEYSCN
	OR	A
	JR	NZ,VSTP10
VSTP11:	CALL	CONIN
	CP	3
	JR	Z,VSTPEX
	CP	27
	JR	Z,VSTP20
	LD	A,$80
	CALL	BELL
	JR	VSTP11
VSTP20:	CALL	KEYSCN
	CP	27
	JR	Z,VSTP20
VSTP30:	POP	AF
	RET
;
BREAK:
VSTPEX:	XOR	A		;IN CASE OF STOPPED BY ^C
	LD	(ERRCODE),A	;      then ERRCODE:=0
	CALL	PRCRLF
	SRV	CPRNXT
	DEFB	"Break!",7,$D,$A,0
	SRV	RESET
	JP	WARM
;
SGETSCN:
	LD	A,(IX+0)
	CP	$F0
	JP	NZ,RDCHR
KEYSCN:	CALL	KEYSCN_HOOK
	IF	PC8X
	ROMCALL	$FAC
	ENDIF
	IF	X1
	KEEP	HL
	LD	HL,(LASTCHR)
	LD	A,L
	OR	H
	JR	Z,KSCN10
	LD	A,L
	LD	HL,0
	LD	(LASTCHR),HL
KSCN10:	KEEPOUT
        ENDIF
	RET
;
;
;PRNXT:
; RST $28
; DEFB 8 ;COFCB
SPUTNXT:	
	EX	(SP),HL
	PUSH	AF
VPNX10:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,VPNX20
	CALL	WRCHR
	JR	VPNX10
VPNX20:	POP	AF
	EX	(SP),HL
	RET
;
PRSTR:	SRV	CPRSTR
	RET
;
SPUTSTR:	
	PUSH	AF
VPST10:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,VPST20
	CALL	WRCHR
	JR	VPST10
VPST20:	POP	AF
	RET
;
;PRSPC:
; RST $28
; DEFB 8 ;COFCB
SPUTSPC:	
	PUSH	AF
	LD	A," "
	CALL	WRCHR
	POP	AF
	RET
;
PRCRLF:	PUSH	AF
	LD	A,(CURX)
	IF	PC8X
	DEC	A
	ENDIF
	IF	X1
	OR	A
	ENDIF
	JR	Z,PRCRLF10
	SRV	CPRCRLF
PRCRLF10:	POP	AF
	RET
;
SPUTCRLF:	
	PUSH	AF
	LD	A,13
	SRV	PUTCHR
	LD	A,10
	SRV	PUTCHR		; CALL WRCHR
	POP	AF
	RET
;
SPUTDEC:
	PUSH	AF
	PUSH	BC
	PUSH	DE
	LD	DE,DECBUF
	CALL	CNVDEC
	LD	B,5
PDC10:	LD	A,(DE)
	INC	DE
	CP	"0"
	JR	NZ,PDC20
	DJNZ	PDC10
	SRV	PUTCHR		; CALL WRCHR
	JR	PDCEE
PDC30:	LD	A,(DE)
	INC	DE
PDC20:	CALL	WRCHR
	DJNZ	PDC30
PDCEE:
	POP	DE
	POP	BC
	POP	AF
	RET
;
;"input DE:outbuf,HL:value
CNVDEC:	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	IY,DECTBL
	LD	B,5
SPD10:	LD	C,0-1
	PUSH	DE
	LD	E,(IY+0)
	LD	D,(IY+1)
	INC	IY
	INC	IY
SPD20:	INC	C
	OR	A
	SBC	HL,DE
	JR	NC,SPD20
	ADD	HL,DE
	POP	DE
	LD	A,C
	ADD	A,$30
	LD	(DE),A
	INC	DE
	DJNZ	SPD10
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	POP	IY
	RET
;
DECTBL:	DEFW	10000
	DEFW	1000
	DEFW	100
	DEFW	10
	DEFW	1
;
;PR4HEX:
; RST $28
; DEFB 8 ;COFCB
SPUT4HEX:
	PUSH	AF
	LD	A,H
	SRV	PUT2HEX		; CALL SPUT2HEX
	LD	A,L
	SRV	PUT2HEX		; CALL SPUT2HEX
	POP	AF
	RET
;
;PR2HEX:
; RST $28
; DEFB 8 ;COFCB
SPUT2HEX:	
	PUSH	AF
	RRA
	RRA
	RRA
	RRA
	CALL	GENHEX
	SRV	PUTCHR		; CALL WRCHR
	POP	AF
	PUSH	AF
	CALL	GENHEX
	SRV	PUTCHR		; CALL WRCHR
	POP	AF
	RET
;
;PRDIR:
; RST $28
; DEFB 8 ;COFCB
SPUTDIR:
	IF	PC8X
	PUSH	AF
	LD	A,(IX+0)
	CP	$F0
	JR	Z,SPDR10
	POP	AF
	ENDIF
	CP	$FF
	JR	Z,SPDR05
	CP	$7F
	JR	Z,SPDR05
	CP	32
	JP	NC,SPUTCHR
SPDR05:	PUSH	AF
	LD	A," "
	CALL	SPUTCHR
	POP	AF
	RET	
	IF	PC8X
SPDR10:	POP	AF
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	HL,($EA63)
	DI
	ROMCALL	$3F3
	EI
	POP	AF
	KEEP	AF
	LD	(HL),A
	XOR	A
	LD	($EA57),A
	LD	A,28
	CALL	CONOUT
	KEEPOUT
        POP     BC
	POP	DE
	POP	HL
	RET
	ENDIF
;
LINP:	RST	$28
	DEFB	7		;CIFCB
SGETLIN:	PUSH	AF
	LD	A,(IX+0)
	CP	$F0
	JR	Z,CONLIN
	POP	AF
	LD	HL,LINBUF
SGL10:	CALL	RDCHR
	CP	10
	JR	Z,SGL10
	CP	13
	JR	Z,SGLNL
	LD	(HL),A
	INC	HL
	CP	$1A
	JR	NZ,SGL10
;
SGLNL:	LD	(HL),0
	LD	HL,LINBUF
	OR	A
	RET
;
CONLIN:	POP	AF
	CALL	LINP_HOOK
	IF	PC8X
	ROMCALL	$1B7E		;$1B8A
	LD	HL,LINBUF
	ENDIF
;
	IF	X1
;
	KEEP	AF,BC,DE
CNL50:	LD	HL,LINBUF
CNL100:	CALL	CONIN
	CP	13
	JR	Z,CNLEEE
	CP	8
	JR	Z,CNLBS
	CP	3
	JP	Z,CNLEXT
	CP	"S"-$40
	JR	Z,CNLBS
	CP	12
	JR	Z,CNLCLS
	CP	" "
	JR	C,CNL100
	LD	(HL+),A
	CALL	CONOUT
	JR	CNL100
;
CNLCLS:	
	CALL	CONOUT
	JR	CNL50
;
CNLBS:	LD	DE,LINBUF
	EX	DE,HL
	OR	A
	SBC	HL,DE
	EX	DE,HL
	JR	Z,CNL100
	DEC	HL
	LD	A,29
	CALL	CONOUT
	LD	A," "
	CALL	CONOUT
	LD	A,29
	CALL	CONOUT
	JR	CNL100
;
CNLEXT:	LD	HL,LINBUF
;
CNLEEE:	LD	(HL),0
	CALL	PRCRLF
	LD	HL,LINBUF
	KEEPOUT
	ENDIF
	RET
;
;
BELL:
SBELL:	CALL	BEEPON
	CALL	WAIT
	JP	BEEPOF
;
	IF	PC8X
BEEPON:
SBEEPON:
	PUSH	AF
	LD	A,($EA67)
	SET	5,A
	JR	SBPC
BEEPOF:
SBEEPOF:
	PUSH	AF
	LD	A,($EA67)
	RES	5,A
SBPC:	OUT	($40),A
	LD	($EA67),A
	POP	AF
	RET
	ENDIF
	IF	X1
SBEEPON:	
BEEPON:	KEEP	AF,BC,DE
	LD	D,1
	LD	E,3		;HIGHT OF SOUND
	CALL	OUTPSG
	LD	D,7
	LD	E,%0011$1110	;ACTIVE VOICE ONLY CH-A
	CALL	OUTPSG
	LD	D,8
	LD	E,10		;VOLUME
	CALL	OUTPSG
	KEEPOUT
	RET
;
SBEEPOF:	
BEEPOF:	KEEP	AF,BC,DE
	LD	D,7
	LD	E,%0011$1111
	CALL	OUTPSG
	KEEPOUT
	RET
;
;
OUTPSG:	LD	BC,$1C00
	OUT	(C),D
	LD	BC,$1B00
	OUT	(C),E
	RET
;
	IF	0
INPSG:  LD      BC,$1C00
	OUT	(C),D
	LD	BC,$1B00
	IN	A,(C)
	RET
	ENDIF
;
        ENDIF
;

;
WAIT:
SWAIT:
	PUSH	AF
	PUSH	BC
	LD	B,A
	LD	C,0
VWAI10:
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,VWAI10
	POP	BC
	POP	AF
	RET
;
STEXTCUR:
	KEEP	AF
	LD	A,B
	AND	C
	INC	A
	JR	Z,STEXTCURREAD
	IF	PC8X
	KEEP	BC
	INC	B
	INC	C
	LD	($EA63),BC
	KEEPOUT	
	ENDIF
	IF	X1
	LD	A,B
	LD	(CURX),A
	LD	A,C
	LD	(CURY),A
	ENDIF
	JR	STEXTCUREEE
STEXTCURREAD:	
	IF	PC8X
	LD	BC,($EA63)
	DEC	B
	DEC	C
	ENDIF
	IF	X1
	LD	A,(CURX)
	LD	B,A
	LD	A,(CURY)
	LD	C,A
	ENDIF
STEXTCUREEE:
        KEEPOUT
	RET
;
SALOMAP:
	LD	IY,ALOMAP
	RET
;
;UNDERR:
; CALL PRNXT
; DEFB $D,$A,"Undef!",7,0
; JP WARM
;
DOSENT2:	
	IF	PC8X
	LD	A,$FF
	LD	($EDC9),A
	ENDIF
	CALL	INITDS
;        LD      (DRIVES),A
	CALL	SRESET
;
VBREAK:
;KEEPS REGISTERS
	DI
	LD	(SPKEEP),SP
	LD	SP,STACK
	IF	PC8X
	PUSH	AF
	PUSH	BC
	LD	A,(BKPADR)
	LD	C,A
	LD	A,(BKRAM0)
	OUT	(C),A
	POP	BC
	POP	AF
	ENDIF
	LD	SP,AFKEEP+2
	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	PUSH	IX
	PUSH	IY
	EX	AF,AF'
	PUSH	AF
	EXX
	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	SP,(SPKEEP)
	POP	HL
	LD	(TPKEEP),HL
	POP	HL
	LD	(SCKEEP),HL
;
DOSENT:	
	IF	PC8X
	LD	A,(BKPADR)
	LD	C,A
	LD	A,(BKRAM0)
	OUT	(C),A
	ENDIF
	LD	SP,STACK
	CALL	REINITS
	JP	START
;
;RE-INIT TABLE,VECTOR,AND KIND OF SO
REINITS:	
	LD	HL,SITBL
RINI100:
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	A,E
	AND	D
	INC	A
	JR	Z,RINI200
	LD	B,(HL)
	INC	HL
RINI110:
	LD	A,(HL)
	INC	HL
	LD	(DE),A
	INC	DE
	DJNZ	RINI110
	JR	RINI100
;
RINI200:	
	IF	PC8X
	LD	A,(BKRAM0)
	LD	(CALSUB+23),A
	LD	A,(BKROM0)
	LD	(CALSUB+14),A
	LD	A,(BKPADR)
	LD	(CALSUB+16),A
	LD	(CALSUB+25),A
	ENDIF
	CALL	REINIT_HOOK
	CALL	BEEPOF
;
INTXXX:	DI
;
;SET INTERRUPT MODE
	IF	X1
	LD	A,$E4		;KEY-INT RESET
	CALL	TRNS49
	LD	A,$1A		;VECTER OFFSET +$1A
	CALL	TRNS49
	LD	HL,(INTVCT)	;INT VCT MUST BE $XX00
	LD	L,A
	LD	DE,KEY_INT
	LD	(HL+),E
	LD	(HL),D
	ENDIF
	LD	A,(INTVCT+1)
	LD	I,A
	IM	2
	IF	PC8X
	LD	A,7
	OUT	(0E4H),A
	ENDIF
	LD	C,0
	CALL	INTINIT_HOOK
	IF	PC8X
	LD	A,C
	OUT	(0E6H),A
	ENDIF
	EI
	RET
;
;
;
;
;
	IF	X1
;
; SUB CPU (8049) ACCESS SEQUENCE
TRNS49:	PUSH	BC
	PUSH	AF
	DI
	LD	BC,$1A01
TR1:	IN	A,(C)
	AND	$40
	JR	NZ,TR1
	LD	BC,$1900
	POP	AF
	OUT	(C),A
	EI
	POP	BC
	RET
;
RECV49:	PUSH	BC
	DI
	LD	BC,$1A01
RC1:	IN	A,(C)
	AND	$20
	JR	NZ,RC1
	LD	BC,$1900
	IN	A,(C)
	EI
	POP	BC
	RET
;
RECV49I:	
	PUSH	BC
	LD	BC,$1A01
RCI1:	IN	A,(C)
	AND	$20
	JR	NZ,RCI1
	LD	BC,$1900
	IN	A,(C)
	POP	BC
	RET
;
	ENDIF
;
;END OF 'kern1.aza'
