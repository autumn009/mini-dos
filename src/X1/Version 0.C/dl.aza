;MINI-DOS V0.A
; PART OF DISK ROUTINES AND KIND OF SO
;Sep.1984 by Aki
;MODEFIED Sep.1984 FOR V0.90
;MODEFIED Oct.1984 FOR V0.95
;DEBUG    Oct.1984 FOR V0.96
;MODEFYED Nov.1984 FOR V0.99
;MODEFYED and DEBUG Dec.1984 FOR V0.9B (WITH HOOK)
;DEBUG    Dec.1984 FOR V0.9C
;DEBUG    Jan.1985 FOR V0.9D
;MODEFIED Jan.1985 FOR V0.A
;  (  DYNAMIC FAT ALOCATION )
;MODEFIED Feb.1985 FOR V0.A8
;  (ADD FILESIZE_HOOK)
;MODEFIED Feb.1985 FOR V0.B
;  (ADD RAW MODE)
;MODEFIED Jun.1985 FOR V0.B2H
;  (ADD SECRET MODE WHEN SECRET EQU TRUE)
;
;
;
;CALICURATION FILE SIZE FROM (FCB+FCL,FAT)
;       AND RETURN SECTORS(in BC)
FILESIZE:	
	CALL	FILESIZE_HOOK
	CALL	FATAD
	LD	A,(IX+FCL)
	LD	BC,0		;SIZE:=0
FLSZ10:	PUSH	HL
	LD	(LASTFAT),A
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	A,(HL)
	LD	(LASTCODE),A
	LD	(LASTADRS),HL
	POP	HL
	CP	160
	JR	NC,FLSZ20
	PUSH	AF
	LD	A,8
	CALL	ADDABC
	POP	AF
	JR	FLSZ10
;
FLSZ20:	PUSH	AF
	AND	$C0
	CP	$C0
	CALL	NZ,BADFRM_WARN
; JP NZ,BADFRM
	POP	AF
	AND	$F
	JR	NZ,ADDABC
	INC	BC
	INC	A		;TURN TO NOT ZERO
	RET
;
ADDABC:	INC	BC
	DEC	A
	JR	NZ,ADDABC
	RET
;
BADFRM_WARN:
	KEEP	AF
	CALL	PRCRLF
	SRV	CPRNXT
	DEFB	7,7,"BAD FAT DRIVE:",0
	CALL	SETDRV
	LD	A,(DRVNO)
	ADD	A,"1"
	SRV	CPRCHR
	SRV	CPRCRLF
	KEEPOUT
	RET
;
;
;
;
;input BC:SECTORS IN FILE
;      IX:FCB(BFS BUFFERSIZE)
;output HL:MAX RECORD NUMBER (BASE 0)
SCTREC:	KEEP	BC
	LD	A,C
	OR	B
	LD	HL,$FFFF
	JR	Z,SCRC30
	DEC	BC
	LD	A,(IX+BFS)
	LD	HL,SCRCTBL
SCRC10:	CP	(HL++)
	JR	NZ,SCRC10
	LD	A,(-HL)
	OR	A
	LD	L,C
	LD	H,B
	JR	Z,SCRC30	;NOT NEED TO SHIFT
SCRC20:	SRL	H
	RR	L
	DEC	A
	JR	NZ,SCRC20
SCRC30:KEEPOUT
	RET
;
SCRCTBL:
	DEFB	1,0
	DEFB	2,1
	DEFB	4,2
	DEFB	8,3
;
SLOC:	CALL	FILESIZE
	CALL	SCTREC
	RET
;
;
;expand random record on disket with ZERO fill
;     used from PUTBLK
;IX:FCB(RCL,RCH,BFTL,BFTH)
;
EXPRC:	CALL	FILESIZE
	JR	Z,EXRE05
	DEC	BC
EXRE05:	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"+++++++++ FILE SIZE IS:",0
	KEEP	HL
	LD	L,C
	LD	H,B
	SRV	CPRDEC
	KEEPOUT
	SRV	CPRCRLF
	ENDIF
	CALL	SCTREC
	LD	A,C
	OR	B
	JR	NZ,EXRE07
	LD	HL,$FFFF
EXRE07:	EX	DE,HL
	LD	L,(IX+RCL)
	LD	H,(IX+RCH)
	INC	HL
	INC	DE
	KEEP	HL
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"NO-MAX(REC):",0
	SRV	CPRDEC
	EX	DE,HL
	LD	A,"-"
	SRV	CPRCHR
	SRV	CPRDEC
	EX	DE,HL
	SRV	CPRCRLF
	ENDIF
	OR	A		;HL:(REC_No.)-DE:(MAX RECORD)
	SBC	HL,DE		;TEST NEED OR NOT
	KEEPOUT
	IF	0		; IF DEBUG
	JP	Z,EXRADJ
	ELSE
	JR	Z,EXRADJ
	ENDIF
	RET	C		;NEED NOT TO ADJ
;NEED TO EXPAND
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"NEED TO EXPAND",$D,$A,0
	ENDIF
;
	CALL	CHGFON
	KEEP	HL,DE
	LD	A,(LASTCODE)
	CP	$C0
	LD	C,L
	LD	B,H
	DEC	BC
	IF	0		; IF DEBUG
	KEEP	HL,BC
	LD	L,C
	LD	H,B
	SRV	CPRNXT
	DEFB	"ADJ RECORD NUM(BASE 0):",0
	SRV	CPRDEC
	SRV	CPRCRLF
	KEEPOUT
	ENDIF
	CALL	NZ,EXRADJ2
	CALL	SETAPPEND
	CALL	FILL0BUF
	KEEPOUT
; INC HL ;!!!!!!!!!!!!!!!!!
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"NEED TO EOF RECS:",0
	SRV	CPRDEC
	SRV	CPRCRLF
	SRV	CPRNXT
	DEFB	"NEED TO EXPAND RECS:",0
	EX	DE,HL
	SRV	CPRDEC
	EX	DE,HL
	SRV	CPRCRLF
	ENDIF
	EX	DE,HL
;
	LD	C,(IX+BFTL)
	LD	B,(IX+BFTH)
	KEEP	BC
	LD	BC,(SYSBUF)
	LD	(IX+BFTL),C
	LD	(IX+BFTH),B
EXRE10:	KEEP	HL
; DEC HL  ;RIGHT RECORD makes ZERO filled before PUTBLK
	OR	A
	SBC	HL,DE
	KEEPOUT
	JR	Z,EXRE20
	KEEP	HL,DE
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"e",0
	ENDIF
	CALL	WRBLK
	LD	A,(IX+NCL)
	CALL	FATOFF
	LD	A,(IX+SCC)
	AND	$F
	OR	$C0
	LD	(HL),A
	KEEPOUT
	INC	HL
	JR	EXRE10
EXRE20:	KEEPOUT
	LD	(IX+BFTL),C
	LD	(IX+BFTH),B
	LD	L,(IX+RCL)
	LD	H,(IX+RCH)
	JP	SRESTORE
; RET
;
EXRADJ:	LD	E,(IX+RCL)	;C
	LD	D,(IX+RCH)	;B
EXRADJ2:
	CALL	CHGFON
	LD	A,(IX+BFS)
	LD	HL,0
EXRA10:	ADD	HL,DE
	DEC	A
	JR	NZ,EXRA10
	LD	A,L
	DEC	A
	AND	%0000$0111
	INC	A
	OR	$C0
	LD	HL,(LASTADRS)
	LD	(HL),A
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"ADJUSTED:",0
	SRV	CPR2HEX
	SRV	CPRCRLF
	ENDIF
	RET
;
CHGFON:	LD	A,(IX+CHGF)
	OR	A
	RET	NZ
	KEEP	HL
	LD	(IX+CHGF),1
	CALL	FFLGAD
	INC	(HL)
	KEEPOUT
	RET
;
FILL0BUF:
	LD	HL,(SYSBUF)
	LD	B,(IX+BFS)
	LD	C,0
	DEC	BC
	LD	E,L
	LD	D,H
	INC	DE
	LD	(HL),0
	LDIR
	RET
;
;for EXPRC only
SETAPPEND:
; SET( SCC,NCL in FCB )
	CALL	FILESIZE
	LD	A,(LASTFAT)
	LD	(IX+NCL),A
	LD	A,(LASTCODE)
	AND	$F
	LD	(IX+SCC),A
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"LAST CODE FOR APPEND:",0
	SRV	CPR2HEX
	SRV	CPRCRLF
	ENDIF
	RET
;
;
MAKFCB:	CALL	MAKFCB_HOOK
	PUSH	DE
	PUSH	BC
	CALL	MKFCB0
	POP	BC
	POP	DE
	RET
;
MKFCB0:	PUSH	IX
	POP	DE
	CALL	CLRFCB
;
MKF05:	LD	A,(HL+)
	CP	" "
	JR	Z,MKF05
	CP	9
	JR	Z,MKF05
;
	LD	A,(HL-)
	CP	":"
	JR	NZ,MKF10
	LD	A,(HL)
	CALL	UPPER
	OR	A
	CALL	FCBDVS_HOOK
	JR	C,MKFCOM
	CP	"L"
	JR	Z,MKFLPT
	CP	"M"
	JR	Z,MKFMEM
	CP	"C"
	JR	NZ,MKF06
	LD	A,$F0
	DEFB	$11
MKFLPT:	LD	A,$E0
	DEFB	$11
MKFMEM:	LD	A,$D0
MKFCOM:	PUSH	IX
	POP	DE
	JR	MKF07
MKF06:	SUB	$31
	CALL	TSTDRV
	JP	C,IFNERR
	INC	A
MKF07:	LD	(DE),A
	INC	HL+
;
MKF10:	INC	DE
	LD	B,8
MKF20:	LD	A,(HL)
	CP	" "+1
	RET	C
	CP	","
	RET	Z
	INC	HL
	CP	"."
	JR	Z,MKF30
	CP	"*"
	JR	Z,MKFNSTR
	LD	(DE+),A
	DJNZ	MKF20
	JR	MKF30
MKFNSTR:	
	LD	A,"?"
	LOOP	B
	LD	(DE+),A
	LEND
;
MKF30:	
	LD	A,(HL)
	CP	"."
	JR	NZ,MKF33
	INC	HL
MKF33:	PUSH	HL
	PUSH	IX
	POP	HL
	LD	DE,9
	ADD	HL,DE
	EX	DE,HL
	POP	HL
	LD	B,3
MKF40:	LD	A,(HL)
	CP	" "+1
	RET	C
	CP	","
	RET	Z
	INC	HL
	CP	"*"
	JR	Z,MKFTSTR
	LD	(DE+),A
	DJNZ	MKF40
	LD	A,(HL)
	RET
;
MKFTSTR:	
	LD	A,"?"
	LOOP	B
	LD	(DE+),A
	LEND
	LD	A,(HL)
	RET
;
CLRFCB:	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	PUSH	IX
	POP	DE
	LD	L,E
	LD	H,D
	INC	DE
	PUSH	DE
	LD	(HL),0
	LD	BC,36-1
	LDIR
	POP	DE
	LD	L,E
	LD	H,D
	LD	(HL)," "
	INC	DE
	LD	BC,11-1
	LDIR
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
;
;
XOPEN:	CALL	XOPEN_HOOK
	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
;
	LD	A,(IX+0)
	AND	$F0
	JP	NZ,ILLMOD
;
	LD	A,(IX+ATRB)
	LD	(ATRKEEP),A
;
	LD	(IX+CHGF),0
;
	CALL	SCHONE
	PUSH	HL
	POP	IY
	JR	C,XOP10
	LD	A,(IY+9)
	LD	(IX+ATRB),A
	LD	A,(IY+10)
	LD	(IX+FCL),A
	LD	(IX+NCL),A
	CP	$4A		;DIRECTORY CLUSTER
	LD	A,$FF
	JR	C,XOP05
	LD	A,1
XOP05:	LD	(IX+DRC),A
	; AND $10
	; JP NZ,PRTERR
	;FILE WRITE PROTECTED
	CALL	TODIR
	JR	XOP20
XOP10:	CALL	SCHFRE
	JP	C,DIRFUL
	CALL	TODIR
	PUSH	HL
	POP	IY
	CALL	FRECLS
	LD	A,(ATRKEEP)
	LD	(IY+9),A
	LD	(IY+10),B
	IF	0		; IF DEBUG
	SRV	CPRNXT
	DEFB	"CREATED FILE'S FIRST IS:",0
	LD	A,B
	SRV	CPR2HEX
	SRV	CPRCRLF
	ENDIF
	CALL	RESTDIR		;RESTORE DIRECTORY
	CALL	FFLGAD		;PENDING FAT FLAG
	INC	(HL)		; TURNS ON
	LD	(IX+CHGF),1	;CHANGED FLAG TURNS ON
	LD	A,B
	CALL	FATOFF
	LD	(HL),$C0	;FILE SIZE 0 SECTORS
	LD	(IX+NCL),B
	LD	(IX+FCL),B
	LD	(IX+DRC),C
	LD	(IX+SCC),0
	CALL	NSCCOM		;INIT FOR BUF OF SEQ ACCESS
	CALL	WRFAT		;NOT TO BREAK FAT ON BOSO
XOP20:
XOPEEE:	POP	AF
	POP	BC
	POP	DE
	POP	HL
	POP	IY
	RET
;
XCLOS:	CALL	XCLOSE_HOOK
	KEEP	HL,DE,BC,AF
	LD	A,(IX+CHGF)
	OR	A
	JR	Z,XCLOSEE
	CALL	SETDRV
	CALL	WRFAT
	CALL	FFLGAD
	DEC	(HL)		;ALREADY NOT PENDING
XCLOSEE:KEEPOUT
	RET
;
RDOPENE:	
	CALL	RDOPEN
	JP	C,FNFERR
	RET
;"IX=[FCB]
RDOPEN:	CALL	RDOPEN_HOOK
	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
;
	PUSH	AF
	LD	A,(IX+0)
	CP	$F0
	JR	Z,ROPEEE
	CP	$E0
	JP	Z,ILLMOD
	CP	$D0
	JR	Z,ROPMEM
	POP	AF
;
	CALL	SCHONE
	JR	C,ROPEER
	CALL	TOFCB
	LD	(IX+EOFF),0
	CALL	FILESIZE
	LD	(IX+FSIZEL),C
	LD	(IX+FSIZEH),B
	CALL	RDBLK
ROPEE:	POP	BC
	POP	DE
	POP	HL
	POP	IY
	OR	A
	RET
ROPEER:	POP	BC
	POP	DE
	POP	HL
	POP	IY
	SCF
	RET
;
ROPEEE:	POP	AF
	OR	A
	JR	ROPEE
;
ROPMEM:	LD	HL,($FF60)
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
	XOR	A
	LD	(RDMFFF),A
	JR	ROPEEE
;
RDBLK:	CALL	RDBLK_HOOK
	LD	A,(IX+SCC)
	CP	8
	JR	NZ,RDB05
	CALL	NXTFAT
	LD	(IX+NCL),A
	LD	(IX+SCC),0
RDB05:	CALL	SETDRV
	CALL	NXTSEC
	CALL	RDSEC
        LD      A,(IX+SCC)
	ADD	A,(IX+BFS)
	LD	(IX+SCC),A
	CALL	NXTFAT
	IF	0		;DEBUG
	KEEP	AF,HL
	SRV	CPRNXT
	DEFB	" NCL:",0
	SRV	CPR2HEX
	SRV	CPRSPC
	SRV	CPRNXT
	DEFB	" SCC:",0
	LD	A,(IX+SCC)
	SRV	CPR2HEX
	SRV	CPRSPC
	SRV	CPRNXT
	DEFB	" BFC:",0
	LD	H,(IX+BFCH)
	LD	L,(IX+BFCL)
	SRV	CPR4HEX
	SRV	CPRSPC
	KEEPOUT
	ENDIF
	LD	C,A
	AND	$F0
	CP	$C0
	JR	NZ,RDBOK
;
	LD	A,C
	AND	$0F
	SUB	(IX+SCC)
	JR	Z,RDBEOF
	JR	NC,RDBOK
	ADD	A,(IX+BFS)
	LD	(IX+BFCH),A
;
	IF	0		;DEBUG
	KEEP	AF
	SRV	CPRNXT
	DEFB	" LAST LEN:",0
	SRV	CPR2HEX
	SRV	CPRSPC
	SRV	CPRNXT
	DEFB	" BFCH!:",0
	LD	A,(IX+BFCH)
	SRV	CPR2HEX
	SRV	CPRSPC
	KEEPOUT
	ENDIF
RDBEOF:	LD	(IX+EOFF),$FF
RDBNG:	SCF
	RET
RDBOK:	OR	A
	RET
;
RDMEM:	PUSH	HL
	LD	A,(RDMFFF)
	OR	A
	LD	A,0
	LD	(RDMFFF),A
	LD	A,10
	JR	NZ,RDMEEE
	LD	L,(IX+BFPL)
	LD	H,(IX+BFPH)
	LD	A,(HL)
	OR	A
	JR	Z,RDMEM10
	INC	HL
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
	CP	13
	JR	NZ,RDMEEE
	LD	(RDMFFF),A
	JR	RDMEEE
RDMEM10:	
	LD	A,$1A
	SCF
RDMEEE:	POP	HL
	RET
;
RDCHR:	CALL	RDCHR_HOOK
	LD	A,(IX+0)
	CP	$F0
	JP	Z,CONIN
	CP	$E0
	JP	Z,ILLMOD
	CP	$D0
	JP	Z,RDMEM
	KEEP	HL,DE,BC
RDCHR00:	
	LD	L,(IX+BFCL)	;BUFFER EMPTY?
	LD	H,(IX+BFCH)
	LD	A,L
	OR	H
	JR	NZ,RDC10
	LD	A,(IX+EOFF)
	OR	A
	JR	Z,RDCNXT
	LD	A,$1A		;ON INPUT PAST END
	SCF			;C flg ON,ANS:EOF mark
	JR	RDCHEC
;
RDCNXT:	CALL	RDBLK
	JR	RDCHR00
RDC10:	DEC	HL
	LD	(IX+BFCL),L
	LD	(IX+BFCH),H
	LD	L,(IX+BFPL)
	LD	H,(IX+BFPH)
	LD	A,(HL+)
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
	OR	A
RDCHEC:	KEEPOUT
	RET
;
RDCLOS:	CALL	RDCLOSE_HOOK	;AS NOP
	RET
;
;"IX=[FCB]
WROPEN:	CALL	WROPEN_HOOK
	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
;
	LD	A,(IX+0)
	CP	$F0
	JP	Z,WOPEEE
	CP	$E0
	JP	Z,WOPEEE
	CP	$D0
	JP	Z,ILLMOD
;
	LD	A,(IX+ATRB)
	LD	(ATRKEEP),A
;
	CALL	SCHONE
	PUSH	HL
	POP	IY
	JR	C,WOP10
	LD	A,(IY+9)
	AND	$10
	JP	NZ,PRTERR
;FILE WRITE PROTECTED
	CALL	ERASEF
;CLEAR OLD FILE DATAS
	JR	WOP20
WOP10:	CALL	SCHFRE
	JP	C,DIRFUL
	CALL	TODIR
WOP20:	PUSH	HL
	POP	IY
	CALL	FRECLS
	LD	A,(ATRKEEP)
	LD	(IY+9),A
	LD	(IY+10),B
	CALL	RESTDIR		;RESTORE DIRECTORY
	CALL	FFLGAD		;PENDING FAT FLAG
	INC	(HL)		; TURNS ON
	LD	A,B
	CALL	FATOFF
	LD	(HL),$C0	;FILE SIZE 0 SECTORS
	LD	(IX+NCL),B
	LD	(IX+FCL),B
	LD	(IX+DRC),C
	LD	(IX+SCC),0
	CALL	NSCCOM		;INIT FOR BUF OF SEQ ACCESS
	CALL	WRFAT		;NOT TO BREAK FAT ON BOSO
WOPEEE:	POP	AF
	POP	BC
	POP	DE
	POP	HL
	POP	IY
	RET
;
WRBLK:	CALL	WRBLK_HOOK
	LD	A,(IX+SCC)
	CP	8
	JR	NZ,WRB10
; IF CLUSTER FULL THEN GET MORE CLUSTER
	XOR	A
	LD	(IX+SCC),A
	LD	A,(IX+NCL)
	CALL	FATOFF
	PUSH	HL
	CALL	NXTFRE
	EX	(SP),HL
	LD	(HL),B
	LD	(IX+NCL),B
	POP	HL
	LD	(HL),$C0
WRB10:	IF	0		; IF DEBUG
	KEEP	HL,DE,BC,AF
	SRV	CPRNXT
	DEFB	"REC:",0
	LD	L,(IX+RCL)
	LD	H,(IX+RCH)
	SRV	CPRDEC
	KEEPOUT
	ENDIF
	CALL	SETDRV
	CALL	NXTSEC
	CALL	WRSEC
	LD	A,(IX+SCC)
	ADD	A,(IX+BFS)
	LD	(IX+SCC),A
	RET
;
NXTFRE:	LD	B,(IX+NCL)
	LD	C,(IX+DRC)
	CALL	TRYFRE
	RET	NC
	LD	B,(IX+NCL)
	LD	C,(IX+DRC)
	LD	A,C
	NEG
	LD	C,A
	CALL	TRYFRE
	RET	NC
	JP	DSKFUL
;
;
;"outputs are
;"B: cluster No.
;"HL: adrs of FAT[B]
TRYFRE:	CALL	FATAD
	PUSH	DE
	LD	E,B
	LD	D,0
	ADD	HL,DE
	POP	DE
TRYAGN:	PUSH	DE
	PUSH	HL
	LD	L,C
	CALL	SEX
	POP	DE
	ADD	HL,DE
	POP	DE
	LD	A,B
	ADD	A,C
	LD	B,A
	CP	160
	CCF
	RET	C
	LD	A,(HL)
	INC	A
	RET	Z
	JR	TRYAGN
;
WRCHRC:	POP	AF
	PUSH	AF
	CALL	CONOUT
	LD	A,(STOPMODE)
	OR	A
	CALL	NZ,DO_STPESC
	JR	WRC10
WRPRINT:	POP	AF
	PUSH	AF
	CALL	LPTOUT
	LD	A,(STOPMODE)
	OR	A
	CALL	NZ,DO_STPESC
	JR	WRC10
;
;"IX=[FCB]
WRCHR:	CALL	WRCHR_HOOK
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	A,(IX+0)
	CP	$F0
	JR	Z,WRCHRC
	PUSH	IX
	POP	DE
	LD	HL,(COFCB)
	POP	AF
	PUSH	AF
	OR	A
	SBC	HL,DE
	CALL	Z,CONOUT
	LD	A,(IX+0)
	CP	$E0
	JP	Z,WRPRINT
	CP	$D0
	JP	Z,ILLMOD
	POP	AF
	PUSH	AF
	LD	L,(IX+BFPL)
	LD	H,(IX+BFPH)
	LD	(HL),A
	INC	HL
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
	LD	L,(IX+BFCL)
	LD	H,(IX+BFCH)
	DEC	HL
	LD	(IX+BFCL),L
	LD	(IX+BFCH),H
	LD	A,L
	OR	H
	JR	NZ,WRC10
	CALL	WRBLK
WRC10:	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
;
WRCLOS:	CALL	WRCLOSE_HOOK
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	A,(IX+0)
	CP	$F0
	JR	Z,WRCL30
	CP	$E0
	JR	Z,WRCL30
	CP	$D0
	JP	Z,ILLMOD
	LD	A,(IX+MODE)
	AND	2
	JR	Z,WRCL05
	CALL	WRFAT
	JR	WRCLEEE
;
WRCL05:
; LD A,(IX+SCC)
	LD	A,(IX+BFCL)
	OR	A
	JR	NZ,WRCL10
	LD	A,(IX+BFCH)
	CP	(IX+BFS)
	JR	Z,WRCL20	;NOT BUFFERED MORE FROM LAST PUT
WRCL10:	LD	L,(IX+BFPL)
	LD	H,(IX+BFPH)
	PUSH	HL
	LD	C,(IX+BFCL)
	LD	B,(IX+BFCH)
WRCL12:	LD	(HL),$1A	;FILL EOF MARK LEFT ON BUFFER
	INC	HL
	DEC	BC
	LD	A,C
	OR	B
	JR	NZ,WRCL12
;
	POP	HL
	LD	E,(IX+BFTL)
	LD	D,(IX+BFTH)
	OR	A
	SBC	HL,DE
	DEC	HL
	INC	H
	LD	(IX+BFS),H	;SET BUFFER SIZE OF USED
	CALL	WRBLK		;PUT LAST BLOCK
;
WRCL20:	LD	A,(IX+NCL)
	CALL	FATOFF
	LD	A,(IX+SCC)
	ADD	A,$C0
	LD	(HL),A		;SET FAT OF LAST CLUSTER
WRCLEEE:	CALL	SETDRV
	CALL	WRFAT
	CALL	FFLGAD
	DEC	(HL)		;ALREADY NOT PENDING
WRCL30:	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
;
;"IX=[FCB](drv No.)
RESDRV:	PUSH	AF
	CALL	SETDRV
	POP	AF
;"[DRVNO]=drv No.
SCHRES:	PUSH	AF
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	RDFAT
	LD	DE,(SYSBUF)
	LD	B,18*2+1
	LD	A,1
	LD	(DIRSEC),A
	LD	C,A
	LD	A,8
	LD	(DIRNUM),A
	CALL	RDSEC
	LD	HL,(SYSBUF)
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
	XOR	A
	LD	(DIRCNT),A
	POP	HL
	POP	DE
	POP	BC
	POP	AF
	RET
;
SCHFRE:	PUSH	DE
	PUSH	BC
	CALL	SCHRES
SRS10:	LD	A,(DIRCNT)
	CP	192
	JR	Z,SRSERR
	CALL	DIRSTP
	LD	A,(HL)
	OR	A
	JR	Z,SRSEE
	CP	$FF
	JR	NZ,SRS10
SRSEE:	POP	BC
	POP	DE
	OR	A
	RET
SRSERR:	POP	BC
	POP	DE
	SCF
	RET
;
RELODDIR:
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	B,18*2+1
	LD	A,(DIRSEC)
	LD	C,A
	LD	A,(DIRNUM)
	LD	DE,(SYSBUF)
	CALL	RDSEC
	POP	AF
	POP	BC
	POP	DE
	RET
;
RESTDIR:
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	B,18*2+1
	LD	A,(DIRSEC)
	LD	C,A
	LD	A,(DIRNUM)
	LD	DE,(SYSBUF)
	CALL	WRSEC
	POP	AF
	POP	BC
	POP	DE
	RET
;
SCHONE:	CALL	RESDRV
;
;"in
;"IX=[FCB]
;"out
;"HL=[DIR]
SCHDIR:	PUSH	DE
	CALL	NXTDIR
	POP	DE
	RET	C
	PUSH	IY
	PUSH	DE
	PUSH	HL
	PUSH	HL
	POP	IY
	PUSH	IX
	POP	DE
	INC	DE
	LD	B,6
SDR10:	LD	A,(DE)
	INC	DE
	CP	"?"
	JR	Z,SDR20
	CP	(HL)
	JR	NZ,SDRERR
SDR20:	INC	HL
	DJNZ	SDR10
	INC	DE
	INC	DE
	LD	B,3
SDR30:	LD	A,(DE)
	INC	DE
	CP	"?"
	JR	Z,SDR40
	CP	(HL)
	JR	NZ,SDRERR
SDR40:	INC	HL
	DJNZ	SDR30
	LD	A,(IY+9)
	LD	(IX+ATRB),A
	LD	A,(IY+10)
	LD	(IX+NCL),A
	LD	(IX+FCL),A
;FOUND!
	CALL	FILESIZE
	LD	(IX+FSZL),C
	LD	(IX+FSZH),B
	POP	HL
	POP	DE
	POP	IY
	OR	A
	RET
;
SDRERR:	POP	HL
	POP	DE
	POP	IY
	JR	SCHDIR
;
NXTDIR:	LD	A,(DIRCNT)
	CP	192
	JR	Z,SDIERR
	CALL	DIRSTP
	LD	A,(HL)
	CP	$FF
	JR	Z,SDIERR
	OR	A
	JR	Z,NXTDIR
	RET
;
SDIERR:
SCFRET:	SCF
	RET
;
DIRSTP:	LD	A,(DIRCNT)
	CP	128
	JR	NZ,SDI10
	LD	DE,(SYSBUF)
	LD	B,18*2+1
	LD	A,9
	LD	(DIRSEC),A
	LD	C,A
	LD	A,4
	LD	(DIRNUM),A
	CALL	RDSEC
	LD	HL,(SYSBUF)
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
SDI10:	LD	L,(IX+BFPL)
	LD	H,(IX+BFPH)
	PUSH	HL
	LD	DE,16
	ADD	HL,DE
	LD	(IX+BFPL),L
	LD	(IX+BFPH),H
	LD	A,(DIRCNT)
	INC	A
	LD	(DIRCNT),A
	POP	HL
	RET
;
;"HL=[DIR]
ERASEF:	PUSH	HL
	PUSH	DE
	PUSH	AF
	LD	DE,10
	ADD	HL,DE
	LD	E,(HL)
ERS10:	LD	D,0
	CALL	FATAD
	ADD	HL,DE
	LD	A,(HL)
	PUSH	AF
	LD	(HL),$FF	;FREE
	POP	AF
	LD	E,A
	AND	$F0
	CP	$C0
	JR	NZ,ERS10
	POP	AF
	POP	DE
	POP	HL
	RET
;
;
;
;"output
;B=CLUSTER NUM
;C=DIRECTION
FRECLS:	PUSH	HL
	PUSH	DE
	CALL	FATAD
	LD	DE,37*2		;(18*2+1)*2
	LD	B,E
	ADD	HL,DE
	PUSH	HL
	PUSH	BC
	LD	C,1
	EXX
	POP	BC
	LD	C,$FF
	POP	HL
FRC10:	EXX
	INC	HL
	INC	B
	LD	A,B
	CP	80*2
	JP	Z,DSKFUL
	LD	A,(HL)
	INC	A
	JR	Z,FRCFND
	EXX
	DEC	HL
	LD	A,B
	OR	A
	JR	Z,FRC10
	DEC	B
	LD	A,(HL)
	INC	A
	JR	NZ,FRC10
FRCFND:
; LD (IX+FPTL),L
; LD (IX+FPTH),H
	LD	A,B
	POP	DE
	POP	HL
	RET
;
;SET PARAMS FOR NEXT BLOCK
;  AND CALULATES FOR WRITE PHYSICAL SECTOR
NXTSEC:	LD	A,(IX+NCL)
	LD	B,A
	SRL	B
	LD	C,1		;1-8 SECTOR
	AND	1
	JR	Z,NSC10
	LD	C,9		;9-16 SECTOR
NSC10:	LD	A,C
	ADD	A,(IX+SCC)
	LD	C,A
NSCCOM:	LD	(IX+BFCL),0
	LD	A,(IX+BFS)
	LD	(IX+BFCH),A
	LD	E,(IX+BFTL)
	LD	D,(IX+BFTH)
	LD	(IX+BFPL),E
	LD	(IX+BFPH),D
	RET
;
SYSSET:	LD	HL,(SYSBUF)
	LD	BC,(SYSBFS-1)	;AS LD B,(SYSBFS)
FCBSET:	LD	(IX+MODE),A
	LD	(IX+BFTL),L
	LD	(IX+BFTH),H
	LD	(IX+BFS),B
	LD	(IX+SCC),0
	JR	NSCCOM
;
NXTFAT:	LD	A,(IX+NCL)
	CALL	FATAD
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	A,(HL)
	RET
;
KEEPDP:	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	HL,DIRCNT
	LD	DE,KPDP
	LD	BC,3
	LDIR
	POP	BC
	POP	DE
	POP	HL
	RET
RELODDP:
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	DE,DIRCNT
	LD	HL,KPDP
	LD	BC,3
	LDIR
	POP	BC
	POP	DE
	POP	HL
	RET
;
RDFAT:	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	CALL	FFLGAD
	LD	A,(HL)
	OR	A
	JP	NZ,RDF10
	CALL	SETDRV
	LD	B,18*2+1
	LD	C,14
	EX	DE,HL
	CALL	FATAD
	EX	DE,HL
	LD	A,1
	CALL	RDSEC
RDF10:	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
;
WRFAT:	KEEP	HL,DE,BC,AF
	CALL	SETDRV
	LD	B,18*2+1
	LD	C,14
	EX	DE,HL
	CALL	FATAD
	EX	DE,HL
WRF10:	LD	A,1
	CALL	WRSEC
	INC	C
	LD	A,C
	CP	17
	JR	NZ,WRF10
	KEEPOUT
	RET
;
FATOFF:	KEEP	DE
	CALL	FATAD
	LD	E,A
	LD	D,0
	ADD	HL,DE
	KEEPOUT
	RET
;
FATAD:	PUSH	DE
	PUSH	AF
	CALL	SETDRV
	LD	A,(DRVNO)
	LD	H,A
	LD	L,0
	LD	DE,(FATTOP)
	ADD	HL,DE
	POP	AF
	POP	DE
	RET
;
FFLGAD:	CALL	SETDRV		;LD A,(IX+0) ;DRVNO)
	RET	Z
	LD	A,(DRVNO)
	PUSH	DE
	LD	E,A
	LD	D,0
	LD	HL,FATFLG
	ADD	HL,DE
	POP	DE
	RET
;
SETDRV:	LD	A,(IX+DVS)
	AND	$F0
	JP	NZ,NOTDRV
	LD	A,(IX+DVS)
;        CP      $F0
;        RET     Z
;        CP      $E0
;        RET     Z
;        CP      $D0
;        RET     Z
	OR	A
	JR	NZ,SDV05
	LD	A,(CURDRV)
	INC	A
SDV05:	DEC	A
	LD	(DRVNO),A
	INC	A		;NOT ZERO
	RET
;
;[IX]=FCB
;[HL]=DIRECTORY
TODIR:	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	IX
	POP	DE
	EX	DE,HL
	INC	HL
	LD	BC,6
	LDIR
	INC	HL
	INC	HL
	LD	BC,3
	LDIR
	POP	BC
	POP	DE
	POP	HL
	RET
;
;[IX]=FCB
;[HL]=DIRECTORY
TOFCB:	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	IX
	POP	DE
	LD	A,(DE)
	OR	A
	JR	NZ,TOFCB1
	LD	A,(CURDRV)
	INC	A
	LD	(DE),A
TOFCB1:	INC	DE
	LD	BC,6
	LDIR
	INC	DE
	INC	DE
	LD	BC,3
	LDIR
	POP	BC
	POP	DE
	POP	HL
	RET
;
TSTDRV:	
;        CP      $F0
;        RET     Z
;        CP      $E0
;        RET     Z
;        CP      $D0
;        RET     Z
	PUSH	AF
	LD	A,(DRVMAX)
	LD	B,A
	POP	AF
	CP	B
	CCF
;        RET     C   ;BUG IN LT.V0.B
;        CP      2+1
;        CCF
	RET
;
	IF	1
SECINF:	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	SRV	CPRNXT
	DEFB	"DRV:",0
	KEEP	AF
	LD	A,(DRVNO)
	ADD	$31
	SRV	CPRCHR
	KEEPOUT
	SRV	CPRNXT
	DEFB	" TRK:",0
	LD	L,B
	LD	H,0
	SRV	CPRDEC
	SRV	CPRNXT
	DEFB	" SEC:",0
	LD	L,C
	LD	H,0
	SRV	CPRDEC
	SRV	CPRNXT
	DEFB	" TRN:",0
	LD	L,A
	LD	H,0
	SRV	CPRDEC
	SRV	CPRCRLF
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
	ENDIF
;
	IF	PC8X
RDSEC:
; SRV CPRNXT
; DEFB "R:",0
;
; CALL SECINF
;
	CALL	RDSEC_HOOK
	PUSH	BC
	PUSH	DE
	PUSH	AF
	LD	(TRSECS),A
	LD	A,2
	ROMCALL	$121
	POP	AF
	PUSH	AF
	LD	B,A
	CALL	RSLTST
	AND	$40
	JP	Z,PHYERR
	LD	A,$12
	CALL	TRCMD
RDS10:	LD	C,$80
RDS15:	LD	A,5*2+1
	OUT	($FF),A
RDS20:	IN	A,($FE)
	AND	1
	JR	Z,RDS20
	LD	A,5*2
	OUT	($FF),A
	IN	A,($FC)
	LD	(DE),A
	INC	DE
	LD	A,6*2+1
	OUT	($FF),A
RDS30:	IN	A,($FE)
	AND	1
	JR	NZ,RDS30
	IN	A,($FC)
	LD	(DE),A
	INC	DE
	LD	A,6*2
	OUT	($FF),A
	DEC	C
	JR	NZ,RDS15
	DJNZ	RDS10
	CALL	RSLTST
	POP	AF
	POP	DE
	POP	BC
;
;  REPAIR CODES
	IF	SECRET
	KEEP	AF,DE,BC,HL
	LOOP	C,A
	LD	L,MAGIC_NUMBER1
	LOOP	B,0
	LD	A,(DE)
	SUB	MAGIC_NUMBER2
	XOR	L
	LD	(DE+),A
	RRC	L
	LEND
	LEND
	KEEPOUT
	ENDIF
;
	RET
;
;
;
WRSEC:	
	PUSH	AF
	LD	A,(RAWMODE)
	OR	A
	JR	NZ,WRSECV
	LD	A,(IX+12)
	AND	%0100$0000
	JR	Z,WRSECC
WRSECV:	POP	AF
	CALL	WRSECX
	CALL	VRSEC
	RET	NC
	CALL	WRSECX
	CALL	VRSEC
	RET	NC
	JP	PHYERR
;
WRSECC:	POP	AF
WRSECX: PUSH    BC
	PUSH	DE
	PUSH	AF
	LD	(TRSECS),A
	LD	A,$14
	CALL	TRCMD
	LD	A,(DRVNO)
	CALL	TR1B
	CALL	RC1B
	AND	$40
	JP	NZ,PRTERR
	LD	A,$11
	ROMCALL	$121
	POP	AF
	PUSH	AF
	LD	B,A
WRS10:	LD	C,$80
WRS20:	IN	A,($FE)
	AND	2
	JR	Z,WRS20
	LD	A,(DE)
	INC	DE
	OUT	($FD),A
	LD	A,4*2+1
	OUT	($FF),A
WRS30:	IN	A,($FE)
	AND	4
	JR	Z,WRS30
	LD	A,(DE)
	INC	DE
	OUT	($FD),A
	LD	A,4*2
	OUT	($FF),A
WRS40:	IN	A,($FE)
	AND	4
	JR	NZ,WRS40
	DEC	C
	JR	NZ,WRS20
	DJNZ	WRS10
	CALL	RSLTST
	POP	AF
	POP	DE
	POP	BC
	RET
;
VRSEC:	CALL	VRSEC_HOOK
	PUSH	BC
	PUSH	DE
	PUSH	AF
	LD	(TRSECS),A
	LD	A,2
	ROMCALL	$121
	POP	AF
	PUSH	AF
	LD	B,A
	CALL	RSLTST
	AND	$40
	JP	Z,PHYERR
	LD	A,$12
	CALL	TRCMD
VRS10:	LD	C,$80
VRS15:	LD	A,5*2+1
	OUT	($FF),A
VRS20:	IN	A,($FE)
	AND	1
	JR	Z,VRS20
	LD	A,5*2
	OUT	($FF),A
	IN	A,($FC)
;
	EX	DE,HL
	CP	(HL)
	JR	NZ,VRERR
	EX	DE,HL
;
	INC	DE
	LD	A,6*2+1
	OUT	($FF),A
VRS30:	IN	A,($FE)
	AND	1
	JR	NZ,VRS30
	IN	A,($FC)
;
	EX	DE,HL
	CP	(HL)
	JR	NZ,VRERR
	EX	DE,HL
;
	INC	DE
	LD	A,6*2
	OUT	($FF),A
	DEC	C
	JR	NZ,VRS15
	DJNZ	VRS10
	CALL	RSLTST
	POP	AF
	POP	DE
	POP	BC
	OR	A
	RET
;
VRERR:	POP	AF
	POP	DE
	POP	BC
	SCF
	RET
;
RSLTST:	LD	A,6
	CALL	TRCMD
	CALL	RC1B
	AND	$41
	CP	1
	RET	NZ
	JP	PHYERR
;
TRCMD:	PUSH	AF
	LD	A,7*2+1
	OUT	($FF),A
	POP	AF
TR1B:	PUSH	BC
	PUSH	DE
	PUSH	AF
TR1B10:	IN	A,($FE)
	AND	6
	CP	6
	JR	Z,TR1B10
	AND	2
	JR	Z,TR1B10
	LD	A,7*2
	OUT	($FF),A
	POP	AF
	PUSH	AF
	OUT	($FD),A
	LD	A,4*2+1
	OUT	($FF),A
TR1B40:	IN	A,($FE)
	AND	4
	JR	Z,TR1B40
	LD	A,4*2
	OUT	($FF),A
TR1B50:	IN	A,($FE)
	AND	4
	JR	NZ,TR1B50
	POP	AF
	POP	DE
	POP	BC
	RET
;
RC1B:	ROMCALL	$1E9
	RET
;
INITDS:	ROMCALL	$00D2
	LD	(DRVMAX),A
	LD	A,$17
	CALL	TRCMD
	LD	A,$0F
	CALL	TR1B
	RET
;
	ENDIF
	IF	X1
;
RDSEC:	
; CALL    SECINF
	CALL	RDSEC_HOOK
	KEEP	DE,BC,AF
	LD	(SECCNT),A
	LD	A,C
	LD	(SECTER),A
	LD	A,B
	OR	A
	RRA
	LD	(TRACK),A
	SBC	A,A
	AND	$10
	OR	$80		;ALWAYS DRIVE-0
	DI
	LD	BC,0FFCH
	OUT	(C),A		;MOTOR ON
	LD	BC,0FF8H
RDS100:	IN	A,(C)		;WAIT UNTIL READY
	RLCA
	JR	C,RDS100
	LD	BC,0FF9H
	LD	A,(LAST_TRACK)
	OUT	(C),A
	LD	C,0FBH
	LD	A,(TRACK)
	OUT	(C),A
	LD	(LAST_TRACK),A
	LD	C,0F8H
	LD	A,1EH		;SEEK COMMMAND
	OUT	(C),A
	CALL	DELAY
	CALL	BUSY
RDS150:	LD	C,0FAH
	LD	A,(SECTER)
	OUT	(C),A
	LD	C,0F8H
	LD	A,80H		;READ COMMAND
	OUT	(C),A
	CALL	DELAY
RDS200:	IN	A,(C)
	RRCA
	JR	NC,RDSE00
	RRCA
	JR	NC,RDS200
	LD	BC,$FFB
	IN	A,(C)
	LD	(DE+),A
	LD	C,$F8
	JR	RDS200
;
RDSE00:	LD	A,(SECTER)
	INC	A
	LD	(SECTER),A
	LD	A,(SECCNT)
	DEC	A
	LD	(SECCNT),A
	JR	NZ,RDS150
;
RDSEEE:	LD	BC,0FFCH
	XOR	A
	OUT	(C),A
	EI
	KEEPOUT
	OR	A
;
;  REPAIR CODES
	IF	SECRET
	KEEP	AF,DE,BC,HL
	LOOP	C,A
	LD	L,MAGIC_NUMBER1
	LOOP	B,0
	LD	A,(DE)
	SUB	MAGIC_NUMBER2
	XOR	L
	LD	(DE+),A
	RRC	L
	LEND
	LEND
	KEEPOUT
	ENDIF
;
	RET
;
WRSEC:	OR	A
	RET
;
VRSEC:	OR	A
	RET
;
INITDS:	
	KEEP	BC
	LD	BC,0FF8H
	XOR	A
	OUT	(C),A		;RECARIBRATE
;
	LD	(LAST_TRACK),A
	KEEPOUT
	LD	A,1
	RET
;
DELAY:	KEEP	AF
	LOOP	A,7
	LEND
	KEEPOUT
	RET
;
BUSY:	LD	BC,0FF8H
	IN	A,(C)
	RRCA
	RET	NC
	JR	BUSY
;
DRVNO:	DB	0
TRACK:	DB	0
SECTER:	DB	0
SECCNT:	DB	0
LAST_TRACK:	DS	4
;
	ENDIF
;
; END OF INCLUDED MODULE 'dl.aza'
