;R19
; MINI-DOS V0.B
;  by Aki
;
FALSE	EQU	0
TRUE	EQU	NOT FALSE
;
DEBUG	EQU	FALSE
;
;
	IF	DEBUG
	TITLE	2:dos.img
ORIGIN	EQU	$9100
BF2K	EQU	$E000
	ELSE
	TITLE	dos.sys
ORIGIN	EQU	$C100
BF2K	EQU	$E000
	ENDIF
;
INTAREA	EQU	$E800
INTVECT	EQU	$E900
;
STARTLOC	EQU	ORIGIN
COLD_TRN_TO	EQU	ORIGIN-$200
;
SYWORK:	EQU	$F220
STACK:	EQU	$FFF0
;
;"FCB offsets
DVS	EQU	0
ATRB	EQU	12
MODE	EQU	13
BFTL	EQU	15
BFTH	EQU	16
BFS	EQU	17
FSZL	EQU	18
FSZH	EQU	19
BFPL	EQU	20
BFPH	EQU	21
BFCL	EQU	22
BFCH	EQU	23
DRC	EQU	24
NCL	EQU	25
SCC	EQU	26
FCL	EQU	27
RCL	EQU	28
RCH	EQU	29
RCF	EQU	30
CHGF	EQU	31
EOFF	EQU	32
FSIZEL	EQU	33
FSIZEH	EQU	34
;
;KERNEL-1 SURVICES
RESET	EQU	4
OPEN	EQU	5
CLOSE	EQU	6
SCHFST	EQU	10
SCHNXT	EQU	11
DSKFRE  EQU     15
;
CINCHR	EQU	16
CINLIN	EQU	17
CPRCHR	EQU	19
CPRSTR	EQU	20
CPRNXT	EQU	21
CPRSPC	EQU	22
CPRCRLF	EQU	23
CPRDEC	EQU	24
CPR4HEX	EQU	25
CPR2HEX	EQU	26
CPRDIR	EQU	27
GETCHR	EQU	32
PUTCHR	EQU	35
PUT2HEX	EQU	42
GETREC	EQU	48
PUTREC	EQU	49
SETREC	EQU	50
SETBUF	EQU	61
SUBSRV	EQU	63
;
;
LINBUF	EQU	$EC96
;
FKBUF	EQU	$EA7C
CRTCBUF	EQU	$FF30
;
;
;"Disk Basic work
TRSECS	EQU	$EDB9
ERRCNT	EQU	$EDC5
DRVNO	EQU	$EDC6
DRIVES	EQU	$EDC7
CURX	EQU	$EA64
SHFTINF	EQU	$EA6A
NULL	EQU	$EA5A
;
;
TPA	EQU	$100
;
CURDRV	EQU	4
;
;
	ORG	STARTLOC
;COLD BOOT INITS
	JP	COLDSTART
	JP	COLDSTART	;DUMMY
;                DEFB BANK_ROM,RAM,PORT
;IF KOM 980 /33 ,DEFB  0,$80,$78
COLDBK:	DEFB	4+32,6+32,$31,3*2 ;IF PC8801
;COLDBK: DEFB    0,$80,$78,0       ;IF KOM980/33
; runnung undef ROM mode
COLDSTART:	
	DI
	LD	SP,STACK
	LD	HL,COLDBODY
	LD	DE,COLD_TRN_TO
	LD	BC,COLDEND-COLDBODY
	LDIR
;
	LD	HL,COLDBK
	LD	DE,BKROM0
	LD	BC,3
	LDIR
	LD	A,(HL)
	LD	(MACHINE),A	;SET MACHINE CODE BY BOOT
	JP	COLD_TRN_TO
;
COLDBODY:	
.PHASE	COLD_TRN_TO
	LD	HL,OPENMES
COLD50:	LD	A,(HL+)
	OR	A
	JR	Z,COLD60
	CALL	$257
	JR	COLD50
;
COLD60:	
;
	LD	A,$C9
	LD	(INTAREA),A
	LD	(STOPMODE),A	;AUTO STOP/ESC SCAN-ON
	XOR	A
	LD	(RAWMODE),A	;NOT RAW MODE
;
	LD	A,(DRIVES)
	LD	(DRVMAX),A
;
;
	LD	A,(COLDBK+2)	;CHANGE RAM MODE(WITH WRITE ENABLE)
	LD	C,A
	LD	A,(COLDBK+1)
	OUT	(C),A
;
	CALL	REINITS
	ROMCALL	$C9		;TO CHANGE ALL RAM MODE
;
;
	SRV	8		;COFCB
	LD	(IX+0),$F0
	LD	A,(DRVMAX)
	LD	H,A
	LD	L,0
	EX	DE,HL
	LD	HL,DOSFROM
	OR	A
	SBC	HL,DE
	LD	(FATTOP),HL
	DEC	HL
	LD	(TPAEND),HL
;
	IF	0
	INC	HL
	SRV	CPRNXT
	DEFB	"ALOCATED DRIVE NUMBER:",0
	LD	A,(DRVMAX)
	SRV	CPR2HEX
	SRV	CPRNXT
	DEFB	"  FAT TOP ADRS:",0
	SRV	CPR4HEX
	SRV	CPRCRLF
	ENDIF
;
	LD	HL,0
	LD	(FATFLG),HL
	LD	(FATFLG+2),HL
	CALL	TSTFLC
	JR	NZ,COLD10
	XOR	A
	LD	(TPA),A
COLD10:	SRV	7		;CIFCB
	LD	HL,AUTOEXMES
	SRV	12		;MAKFCB
	LD	HL,REDCINBUF
	LD	B,1
	XOR	A
;
	SRV	5		;OPEN
	JP	C,START
	JP	STARTCOM	;INPUT COMMAND FROM autoex.bat
;
	IF	DEBUG
AUTOEXMES:	DEFB	"autoex.bat",0
	ELSE
AUTOEXMES:	DEFB	"1:autoex.bat",0
	ENDIF
;
OPENMES:	
	DEFB	12
	DEFB	"MINI-DOS Ver 0.B",$D,$A
	DEFB	"Copyright 1984 (c) by Akira Kita",$D,$A
	DEFB	$D,$A
	DEFB	0
;
.DEPHASE
COLDEND:	
;END OF COLD
	DEFS	STARTLOC+256-*
;
;
;FATBFS:
	DEFS	256*2		;MAX DRIVES 4
;
;
;
DOSFROM:
	JP	WARM		;DUMMY FOR CP/M like BDOS or BIOS
ZEROVECT:	JP	WARM
;
;ALOCATION MAP
;
BKROM0:	DEFB	4+32		;0 ;BANK SELECT DEFAULT
BKRAM0:	DEFB	6+32		;$80
BKPADR:	DEFB	$31		;$78
ALOMAP:
	DEFW	$000B
MACHINE:	DEFB	0	;IF KOM980/33
WARM:	JP	DOSCMD
EXEC:	DEFW	DOSENT
	DEFW	TPA
TPAEND:	DEFW	DOSFROM-1-2048	;DUMMY VALUE
SYSBUF:	DEFW	BF2K
	DEFW	BF2K+2047
	DEFW	DOSFROM
	DEFW	ZZZZZZ-1
	DEFW	KEEPREG
INTVCT:	DEFW	INTVECT		;INTERRUPT VECTOR AREA TOP
	DEFW	INTAREA
ERRCODE:	DEFB	0
DRVMAX:	DEFB	0
;
CUT_HOOK:	JP	CMDERR
;
SRVENT_HOOK:	RET
	DEFW	0
SRVEXP_HOOK:	RET
	DEFW	0
FLOPEN_HOOK:	RET
	DEFW	0
FLOPTION_HOOK:	RET
	DEFW	0
FILTER_HOOK:	RET
	DEFW	0
FLCLOSE_HOOK:	RET
	DEFW	0
GETCMD_HOOK:	RET
	DEFW	0
CMDTYPE_HOOK:	RET
	DEFW	0
REINIT_HOOK:	RET
	DEFW	0
INTINIT_HOOK:	RET
	DEFW	0
;
RDOPEN_HOOK:	RET
	DEFW	0
WROPEN_HOOK:	RET
	DEFW	0
XOPEN_HOOK:	RET
	DEFW	0
RDCHR_HOOK:	RET
	DEFW	0
WRCHR_HOOK:	RET
	DEFW	0
RDBLK_HOOK:	RET
	DEFW	0
WRBLK_HOOK:	RET
	DEFW	0
RDCLOSE_HOOK:	RET
	DEFW	0
WRCLOSE_HOOK:	RET
	DEFW	0
XCLOSE_HOOK:	RET
	DEFW	0
CONIN_HOOK:	RET
	DEFW	0
LINP_HOOK:      RET
	DEFW	0
CONOUT_HOOK:	RET
	DEFW	0
LPTOUT_HOOK:	RET
	DEFW	0
KEYSCN_HOOK:	RET
	DEFW	0
SENSE_HOOK:	RET
	DEFW	0
MAKFCB_HOOK:    RET
	DEFW	0
RESTORE_HOOK:	RET
	DEFW	0
RESET_HOOK:	RET
	DEFW	0
TEXTINI_HOOK:	RET
	DEFW	0
RDSEC_HOOK:	RET
	DEFW	0
WRSEC_HOOK:	RET
	DEFW	0
SUBSRV_HOOK:	RET
	DEFW	0
;
ERASE_HOOK:	RET
	DEFW	0
RENAME_HOOK:	RET
	DEFW	0
SCHFST_HOOK:	RET
	DEFW	0
SCHNXT_HOOK:	RET
	DEFW	0
DSKFRE_HOOK:	RET
	DEFW	0
FCBDVS_HOOK:	RET
	DEFW	0
;
FILESIZE_HOOK:	RET
	DEFW	0
CHANGEATTR_HOOK:	RET
	DEFW	0
VRSEC_HOOK:	RET
	DEFW	0
;
	DEFW	0,0
;
;
;
START:	SRV	7		;CIFCB
	LD	(IX+0),$F0
STARTCOM:	
	XOR	A
	LD	(ERRCNT),A
	SRV	8		;COFCB
	LD	(IX+0),$F0
	LD	A,(DRIVES)
	LD	(DRVMAX),A
	CALL	PRCRLF		; SRV CPRCRLF
	LD	HL,0
	LD	(FATFLG),HL
	LD	(FATFLG+2),HL
;
DOSCMD:
;
DOSCMD0:
	LD	SP,STACK
	CALL	PRCRLF		; SRV CPRCRLF
	LD	A,$82
	SRV	SUBSRV
	KEEP	AF
	LD	A,2
	SRV	SUBSRV
;
	CALL	FLOPTION_HOOK
	CALL	TSTFLC
	CALL	Z,TPA+$F
	XOR	A
	LD	(ERRCODE),A
	LD	A,"$"
	IF	DEBUG
	KEEP	AF
	SRV	CPRCHR		;CALL    PRCHR
	KEEPOUT
	ENDIF
	SRV	CPRCHR
;
	KEEPOUT
	AND	1
	ADD	2
	SRV	SUBSRV
;
	CALL	GETCMD_HOOK
	SRV	CINLIN		;CALL    LINP
	LD	A,(HL)
	CP	$1A
	JP	Z,REDCINEOF
	JP	C,DOSCMD
	PUSH	HL
	SRV	7		;CIFCB
	LD	A,(IX+0)
	CP	$F0
	JR	NZ,DCM000
	SRV	8		;LD      IX,(COFCB)
	LD	A,(IX+0)
	CP	$F0
	JR	Z,DOSCMDSUB
DCM000:	PUSH	AF
	CALL	NZ,PRSTR
	POP	AF
	CALL	NZ,PRCRLF
	POP	HL
;
DOSCMDSUB:
CHAIN_CMD:	
	CALL	FILTER_HOOK
	CALL	TSTFLC
	CALL	Z,TPA+9
DCM10:	LD	A,(HL)
	INC	HL
	CALL	UPPER
	CALL	TST09
	JP	NC,COMCMD
;
	PUSH	HL
	LD	HL,DCMTBL
	LD	B,A
DCM20:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,CMDERR
	CP	B
	JR	Z,DCMGO
	INC	HL
	INC	HL
	JR	DCM20
DCMGO:	LD	E,(HL)
	INC	HL
	LD	D,(HL)
        LD      A,B
	POP	HL
	PUSH	DE
	RET
;
CMDERR:	SRV	8
	LD	A,(IX+0)
	CP	$F0
	JR	NZ,CMDERR10
	LD	A,30
	SRV	CPRCHR
CMDERR10:	
	SRV	CPRNXT
	DEFB	"?",$D,$A,0
	JP	DOSCMD
;
;
DCMTBL:	DEFB	$1A
	DEFW	DOSENT
	DEFB	"B"
	DEFW	BOOTCMD
	DEFB	'"'
	DEFW	$100
	DEFB	"?"
	DEFW	DCM10
	DEFB	"$"
	DEFW	DCM10
	DEFB	":"
	DEFW	COMCMD2
	DEFB	"D"
	DEFW	DIRCMD
	DEFB	"T"
	DEFW	TYPCMD
	DEFB	"S"
	DEFW	SAVCMD
	DEFB	"L"
	DEFW	LODCMD
	DEFB	"K"
	DEFW	KILCMD
	DEFB	"R"
	DEFW	RESCMD
	DEFB	"N"
	DEFW	NAMCMD
	DEFB	"<"
	DEFW	REDCIN
	DEFB	">"
	DEFW	REDCOUT
	DEFB	"C"
	DEFW	CUTCMD
	DEFB	0
;
CUTCMD:	LD	DE,UTMES
	CALL	SKIPNXT
	JP	CUT_HOOK
UTMES:	DEFB	"UT",0
;
BOOTCMD:	
	LD	A,(HL+)
	CALL	UPPER
	CP	"O"
	JP	NZ,VBASIC
	LD	DE,OTMES
	CALL	SKIPNXT
	DI
	XOR	A
	OUT	($E6),A		;DISABLE INTERRUPTS
	ROMCALL	0		;BOOT
; NEVER RETURN
;
OTMES:	DEFB	"OT",0
;
REDCOUT:
	LD	A,(HL)
	OR	A
	JR	Z,REDCOUTEOF
	LD	IX,(COFCB)
	PUSH	HL
	SRV	CLOSE
	POP	HL
	SRV	12		;MAKFCB
	LD	HL,REDCOUTBUF
	LD	B,1
	LD	A,1
	SRV	OPEN
	JP	DOSCMD
;
REDCOUTEOF:
	LD	IX,(COFCB)
	SRV	CLOSE
	LD	(IX+0),$F0	;CONSOLE
	JP	DOSCMD
;
REDCIN:	PUSH	HL
	LD	IX,(CIFCB)
	SRV	CLOSE
	POP	HL
	SRV	12		;MAKFCB
	CALL	SETBAT
REDCINCOM:	
	LD	HL,REDCINBUF
	LD	B,1
	XOR	A
	SRV	5		;OPEN
	JP	NC,DOSCMD
	LD	(IX+0),$F0
	JP	CMDERR
;
REDCINEOF:
	LD	A,$1A		;EOF
	SRV	CPRCHR
	SRV	CPRCRLF
	LD	IX,(CIFCB)
	SRV	CLOSE
	LD	(IX+0),$F0
	JP	DOSCMD
;
GETDRVNO:
	LD	A,(HL)
	CP	" "
	JR	NZ,GDN10
	INC	HL
	JR	GETDRVNO
GDN10:	CALL	TST09
	JR	C,GDN20
	KEEP	HL
	LD	(+HL),":"
	LD	(+HL),0
	KEEPOUT
GDN20:	SRV	12		;MAKFCB
	RET
;
;
;
DRVCMD:	INC	HL
	LD	IX,CFCB
	CALL	GETDRVNO
	LD	A,(IX+0)
	OR	A
	JP	Z,CMDERR
	DEC	A
	LD	(CURDRV),A
	JP	DOSCMD
;
DIRCMD:	LD	A,(HL)
	CALL	UPPER
	CP	"S"
	JP	Z,DSTAT
	CP	"R"
	JR	Z,DRVCMD
;
	LD	IX,CFCB
	CALL	GETDRVNO
	CALL	FILLQQQ
	CALL	DIRSUB
	JP	DOSCMD
;
DIRSUB:	LD	IY,CFCB2
	SRV	SCHFST
	JR	DSB11
DSB10:	SRV	SCHNXT
DSB11:	JR	C,DSB20
	CALL	DSPDIR
	JR	DSB10
;
DSB20:	CALL	PRCRLF
	SRV	CPRNXT
	DEFB	"***** Drive: ",0
	CALL	PRDRVNO
	SRV	CPRNXT
	DEFB	", Bytes Remaining: ",0
	SRV	DSKFRE
	SRL	H
	RR	L
	SRL	H
	RR	L
	SRV	CPRDEC
	LD	A,"K"
	SRV	CPRCHR
	RET
;
DSPDIR:	PUSH	HL
	PUSH	IX
DDR10:	CALL	GETCURX
	OR	A
	JR	NZ,DDR15
	CALL	PRDRVNO
;
DDR15:	LD	A,":"
	SRV	CPRCHR
	PUSH	IY
	POP	HL+
	LOOP	B,8
	LD	A,(HL+)
	SRV	CPRCHR
	LEND
	LD	A,"."
	SRV	CPRCHR
	LOOP	B,3
	LD	A,(HL+)
	SRV	CPRCHR
	LEND
;
	SRV	CPRSPC
;
	LD	C,(IX+FSIZEL)
	LD	B,(IX+FSIZEH)
	LD	L,C
	LD	H,B
	LD	DE,7
	ADD	HL,DE
	LD	B,3
DDR24:	SRL	H
	RR	L
	DJNZ	DDR24
	ADD	HL,HL
	LD	DE,100
	CALL	DDRSPC
	LD	DE,10
	CALL	DDRSPC
	SRV	CPRDEC
	SRV	CPRNXT
	DEFB	"K ",0
	CALL	GETCURX
	CP	70
	CALL	NC,PRCRLF
	POP	IX
	POP	HL
	RET
;
DDRSPC:	KEEP	HL
	OR	A
	SBC	HL,DE
	JR	NC,DDRSPC10
	SRV	CPRSPC
DDRSPC10:KEEPOUT
	RET
;
FREECR:	CALL	FATAD
	LD	B,80*2
	LD	C,0
FCR10:	LD	A,(HL)
	INC	HL
	INC	A
	JR	NZ,FCR20
	INC	C
FCR20:	DJNZ	FCR10
	LD	A,C
	RET
;
DSTAT:	INC	HL
	PUSH	HL
	LD	IX,CFCB2
	SRV	12		;MAKFCB
	POP	HL
	LD	IX,CFCB
	SRV	12		;MAKFCB
	CALL	DST05
	JP	DOSCMD
DST05:	LD	IY,CFCB2
	SRV	SCHFST
	JR	DST12
DST10:	LD	IY,CFCB2
	SRV	SCHNXT
DST12:	JP	C,DSB20
	CALL	DSPDIR
	PUSH	IX
	LD	B,(IY+ATRB)
	BIT	4,B
	LD	A,"p"
	CALL	NZ,PRCHR
	BIT	6,B
	LD	A,"r"
	CALL	NZ,PRCHR
	BIT	7,B
	LD	A,"b"
	CALL	NZ,PRCHR
	BIT	0,B
	LD	A,"i"
	CALL	NZ,DSTIMG
	SRV	CPRCRLF
	POP	IX
	JR	DST10
;
DSTIMG:	SRV	CPRNXT
	DEFB	"i :$",0
	LD	IX,CFCB2
	CALL	KEEPDP
	LD	A,0
	LD	B,1
	LD	HL,(SYSBUF)
	SRV	OPEN
	CALL	DST4H
	SRV	CPR4HEX
	SRV	CPRNXT
	DEFB	"-$",0
	CALL	DST4H
	SRV	CLOSE
	DEC	HL
	SRV	CPR4HEX
	CALL	RELODDP
	CALL	RELODDIR
	RET
;
DST4H:	SRV	GETCHR
	LD	L,A
	SRV	GETCHR
	LD	H,A
	RET
;
TYPCMD:	LD	IX,CFCB
	SRV	12		;MAKFCB
	CALL	SYSROPEN
TPC10:	SRV	GETCHR
;        JR      C,TPC20
	CP	$1A		;EOF MARK
	JR	Z,TPC20
	SRV	CPRCHR
	JR	TPC10
TPC20:	SRV	CLOSE
	JP	DOSCMD
;
KILCMD:	LD	DE,ILLMES
	CALL	SKIPNXT
	CP	" "
	JP	NZ,CMDERR
	LD	IX,CFCB
	SRV	12		;MAKFCB
	LD	IY,CFCB2
	SRV	SCHFST
	JP	C,FNFERR
	CALL	DSPDIR
	SRV	13		;ERASE
	SRV	CPRNXT
	DEFB	" Erased!",0
	JP	DOSCMD
ILLMES:	DEFB	"ILL",0
;
RESCMD:	LD	DE,ESETMES
	CALL	SKIPNXT
	CALL	SRESET
	CALL	STEXTINI
	CALL	FLCCLOS
	JP	DOSCMD
ESETMES:	DEFB	"ESET",0
;
NAMCMD:	LD	DE,AMEMES
	CALL	SKIPNXT
	LD	IX,CFCB
	SRV	12		;MAKFCB
	CP	","
	JP	NZ,CMDERR
	INC	HL
	LD	IX,CFCB2
	SRV	12		;MAKFCB
	LD	IX,CFCB
	LD	IY,CFCB2
	SRV	14		;RENAME
	JP	NC,DOSCMD
	DEC	A
	JP	Z,EXSERR
	JP	FNFERR
;
AMEMES:	DEFB	"AME",0
;
;
REDCINCMD:	
	LD	IX,(CIFCB)
	SRV	CLOSE
	PUSH	IX
	POP	DE
	LD	HL,CFCB
	LD	BC,36
	LDIR
	JP	REDCINCOM
;
COMCMD:	DEC	HL
COMCMD2:
	LD	IX,CFCB
	SRV	12		;MAKFCB
	LD	(WWK),HL	;TO KEEP COMMAND STRINGS
	IF	0
	SRV	CPRSTR
	SRV	CPRCRLF
	ENDIF
	CALL	SETQQQ
	LD	IY,CFCB2
	SRV	SCHFST
	JR	CMM110
CMM100:	LD	IX,CFCB
	SRV	SCHNXT
CMM110:	JP	C,CMDERR
	PUSH	IY
	POP	IX
	IF	0
	PUSH	IX
	CALL	DSPDIR
	SRV	CPRCRLF
	POP	IX
	ENDIF
	SCF
	CALL	CMDTYPE_HOOK
	JR	C,CMM150
	JR	NZ,CMM210
	JR	CMM200
;
CMM150:	LD	HL,BATMES
	CALL	CHKTYP
	JR	NC,REDCINCMD
	LD	BC,0
	LD	HL,OVRMES
	CALL	CHKTYP
	LD	DE,(SYSBUF)
	JR	NC,CMM210
	LD	HL,EXPMES
	CALL	CHKTYP
	LD	DE,TPA
	JR	NC,CMM200
	LD	HL,TRCMES
	CALL	CHKTYP
	JR	NC,CMM200
	LD	HL,FLCMES
	CALL	CHKTYP
	JR	C,CMM100	;NOT enough 3 types
	LD	BC,3
CMM200:	CALL	FLCCLOS
CMM210:
;IS [ IY <- [CFCB] ]
	KEEP	BC
	PUSH	DE
	LD	B,8
	LD	A,2		;RANDOM OPEN (Found File)
	SRV	5		;OPEN
	LD	A,(IX+ATRB)
	AND	1
	JR	Z,CMM290
	DEC	DE
	DEC	DE
	DEC	DE
	DEC	DE
CMM290:	LD	HL,0
CMM300:	EX	DE,HL
	SRV	SETBUF
	EX	DE,HL
	SRV	SETREC
	JR	C,CMMEOF
	IF	0		;DEBUG
	KEEP	HL,DE,BC,AF
	SRV	CPRNXT
	DEFB	"RC:",0
	SRV	CPRDEC
	SRV	CPRNXT
	DEFB	" AD:",0
	EX	DE,HL
	SRV	CPR4HEX
	SRV	CPRCRLF
	EX	DE,HL
	KEEPOUT
	ENDIF
	SRV	GETREC
	INC	HL
	LD	A,8
	ADD	A,D
	LD	D,A
	JR	CMM300
CMMEOF:	SRV	CLOSE
	POP	HL
	KEEPOUT
	ADD	HL,BC
	PUSH	HL
	LD	BC,TPA+3
	OR	A
	SBC	HL,BC
	CALL	Z,FLOPEN_HOOK
	IF	0		;DEBUG
	SRV	CPRNXT
	DEFB	"JUMP TO:",0
	SRV	CPR4HEX
	SRV	CPRCRLF
	ENDIF
	LD	HL,(WWK)
	RET			;JUMP TO COMMAND
;
CHKTYP:	KEEP	BC
	KEEP	HL,IX
	LOOP	B,3
	LD	A,(HL+)
	CP	(IX+9)
	INC	IX
	SCF
	JR	NZ,CHKEEE
	LEND
	KEEPOUT
	KEEP	HL,IX
	LOOP	B,3
	LD	A,(HL+)
	LD	(IX+9),A
	INC	IX
	LEND
	OR	A
CHKEEE:	KEEPOUT
	KEEPOUT
	RET
;
;
	IF	0
SAVCMD:	LD	A,(HL)
	INC	HL
	CALL	UPPER
	LD	IX,CFCB
	CP	"T"
	JP	NZ,SVICMD
	SRV	12		;MAKFCB
	CALL	SETAZA
	CALL	SYSSET
	CALL	WROPEN
	LD	HL,($FF60)
SVT10:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,SVTEE
	CALL	WRCHR
	CP	13
	LD	A,10
	CALL	Z,WRCHR
	JR	SVT10
SVTEE:	LD	A,$1A
	CALL	WRCHR
	CALL	WRCLOS
	JP	DOSCMD
	ENDIF
;
	IF	0
LODCMD:	LD	A,(HL)
	INC	HL
	CALL	UPPER
	CP	"T"
	JP	NZ,LDICMD
	LD	BC,($FF60)
	PUSH	BC
	LD	A,(HL)
	CALL	UPPER
	CP	"A"
	JR	NZ,LDT05
	INC	HL
	POP	BC
	PUSH	HL
	LD	L,C
	LD	H,B
	LD	BC,$FFFF
	XOR	A
	CPIR
	DEC	HL
	EX	(SP),HL
LDT05:	LD	IX,CFCB
	SRV	12		;MAKFCB
	CALL	SETAZA
	CALL	SYSSET
	CALL	RDOPENE
	POP	HL
LDT10:	CALL	RDCHR
	CP	10
	JR	Z,LDT10
	CP	$1A
	JR	Z,LDT20
	LD	(HL),A
	INC	HL
	JR	LDT10
LDT20:	LD	(HL),0
	CALL	RDCLOS
	JP	DOSCMD
	ENDIF
;
SETBAT:	PUSH	HL
	LD	HL,BATMES
	JP	SETFTCOM
;
SETAZA:	PUSH	HL
	LD	HL,AZAMES
	JP	SETFTCOM
;
SETIMG:	PUSH	HL
	LD	HL,IMGMES
	JP	SETFTCOM
;
SETQQQ:	PUSH	HL
	LD	HL,QQQMES
;
SETFTCOM:	
	CALL	SETCOM
	POP	HL
	RET
;
SETFKY:	LD	HL,FKYMES
SETCOM:	PUSH	AF
	PUSH	IX
	LD	A,(IX+9)
	CP	" "
	JR	NZ,STC20
SETCOM2:	PUSH	BC
	LD	B,3
STC10:	LD	A,(HL)
	INC	HL
	LD	(IX+9),A
	INC	IX
	DJNZ	STC10
	POP	BC
STC20:	POP	IX
	POP	AF
	RET
;
BATMES:	DEFB	"bat"
AZAMES:	DEFB	"aza"
IMGMES:	DEFB	"img"
FKYMES:	DEFB	"fky"
TRCMES:	DEFB	"trc"
OVRMES:	DEFB	"ovr"
FLCMES:	DEFB	"flc"
EXPMES:	DEFB	"exp"
QQQMES:	DEFB	"???"
;
;"HL:ptr,DE:scn
SKIPNXT:	
	LD	A,(DE)
	OR	A
	LD	A,(HL)
	RET	Z
	CALL	UPPER
	EX	DE,HL
	CP	(HL)
	INC	HL
	EX	DE,HL
	JP	NZ,CMDERR
	INC	HL
	JR	SKIPNXT
;
;
SAVCMD:	LD	A,(HL+)
	CALL	UPPER
SVICMD:	LD	IX,CFCB
	CP	"K"
	JP	Z,SVKCMD
	DEC	HL
	SRV	12		;MAKFCB
	CP	","
	JP	NZ,CMDERR
	INC	HL
	CALL	SETIMG
	CALL	GET4H
	LD	(SA),DE
	CP	","
	JP	NZ,CMDERR
	CALL	GET4H
	LD	(EA),DE
	OR	A
	LD	DE,0
	JR	Z,SVI10
	CALL	GET4H
	PUSH	HL
	LD	HL,(SA)
	OR	A
	EX	DE,HL
	SBC	HL,DE
	EX	DE,HL
	POP	HL
SVI10:	LD	(OF),DE
	LD	(IX+12),1
	CALL	SYSWOPEN
	LD	DE,(SA)
	LD	HL,(EA)
	OR	A
	SBC	HL,DE
	INC	HL
	LD	C,L
	LD	B,H
	LD	HL,(SA)
	LD	DE,(OF)
	ADD	HL,DE
	LD	A,(SA)
	SRV	PUTCHR
	LD	A,(SA+1)
	SRV	PUTCHR
	PUSH	HL
	LD	HL,(EA)
	INC	HL
	LD	A,L
	SRV	PUTCHR
	LD	A,H
	SRV	PUTCHR
	POP	HL
SVI20:	LD	A,(HL)
	INC	HL
	SRV	PUTCHR
	DEC	BC
	LD	A,C
	OR	B
	JR	NZ,SVI20
	SRV	CLOSE
	JP	DOSCMD
;
LODCMD:	LD	A,(HL+)
	CALL	UPPER
LDICMD: LD      IX,CFCB
	CP	"K"
	JP	Z,LDKCMD
	DEC	HL
	SRV	12		;MAKFCB
	CALL	SETIMG
	INC	HL
	CP	","
	LD	DE,$FFFF
	CALL	Z,GET4H
	LD	(OF),DE
	LD	(IX+12),1
	CALL	SYSROPEN
	SRV	GETCHR
	LD	L,A
	SRV	GETCHR
	LD	H,A
	LD	(SA),HL
	PUSH	HL
	SRV	GETCHR
	LD	L,A
	SRV	GETCHR
	LD	H,A
	DEC	HL
	LD	(EA),HL
	POP	DE
	OR	A
	SBC	HL,DE
	INC	HL
	LD	C,L
	LD	B,H
	LD	HL,(OF)
	LD	A,L
	AND	H
	INC	A
	JR	NZ,LDI20
	EX	DE,HL
LDI20:	SRV	GETCHR
	LD	(HL),A
	INC	HL
	DEC	BC
	LD	A,C
	OR	B
	JR	NZ,LDI20
	SRV	CLOSE
	JP	DOSCMD
;
SVKCMD:	SRV	12		;MAKFCB
	CALL	SETFKY
	CALL	SYSWOPEN
	LD	HL,FKBUF
	LD	B,160
SVK10:	LD	A,(HL)
	INC	HL
	PUSH	BC
	SRV	PUTCHR
	POP	BC
	DJNZ	SVK10
	SRV	CLOSE
	JP	DOSCMD
;
LDKCMD:	SRV	12		;MAKFCB
	CALL	SETFKY
	CALL	SYSROPEN
	LD	HL,FKBUF
	LOOP	B,160
	SRV	GETCHR
	LD	(HL+),A
	LEND
;        DEC     HL
;        LD      (HL),0
	SRV	CLOSE
	LD	A,1
	LD	(SHFTINF),A
	JP	DOSCMD
;
SYSROPEN:	
	LD	A,0
	LD	B,8
	LD	HL,(SYSBUF)
	SRV	OPEN
	JP	C,FNFERR
	RET
;
SYSWOPEN:	
	LD	A,1
	LD	B,8
	LD	HL,(SYSBUF)
	SRV	OPEN
	RET
;
GETCURX:	
	LD	BC,$FFFF
	SRV	54		;TEXTCUR
	LD	A,B
	RET
;
PRDRVNO:	
        LD      A,(IX+0)
	OR	A
	JR	NZ,PCN10
	LD	A,(CURDRV)
	INC	A
PCN10:	ADD	A,"0"
	SRV	CPRCHR
	RET
;
FILLQQQ:	
	PUSH	IX
	POP	HL
	INC	HL
	LD	E,L
	LD	D,H
	INC	DE
	LD	BC,11-1
	LD	(HL),"?"
	LDIR
	RET
;
GET4H:	EX	DE,HL
	LD	HL,0
GET4H1:	LD	A,(DE)
	INC	DE
	CALL	UPPER
	CALL	TSTHEX
	EX	DE,HL
	RET	C
	EX	DE,HL
	CALL	ADDHEX
	JR	GET4H1
;
ADDHEX:	CALL	TST09
	JR	NC,ADHX10
	SUB	"A"-10
	JR	ADHX20
ADHX10:	SUB	"0"
ADHX20:	PUSH	DE
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	E,A
	LD	D,0
	ADD	HL,DE
	POP	DE
	RET
;
TSTHEX:	CALL	TST09
	RET	NC
	CALL	TSTAF
	RET
;
TST09:	CP	"0"
	RET	C
	CP	"9"+1
	CCF
	RET
;
TSTAF:	CP	"A"
	RET	C
	CP	"F"+1
	CCF
	RET
;
;"need to debug
GENHEX:	AND	$F
	ADD	A,"0"
	CP	"9"+1
	RET	C
	ADD	A,"A"-"0"-10
	RET
;
UPPER:	CP	"a"
	RET	C
	CP	"z"+1
	RET	NC
	SUB	$20
	RET
;
SEX:	PUSH	AF
	LD	A,L
	RLA
	SBC	A,A
	LD	H,A
	POP	AF
	RET
;
TSTFLC:	LD	A,(TPA)
	CP	$C3
	RET	NZ
	LD	A,(TPA+1)
	OR	A
	RET	NZ
	LD	A,(TPA+2)
	OR	A
	RET
;
FLCCLOS:	
	CALL	TSTFLC
	RET	NZ
	IF	0		;IF DEBUG
	SRV	CPRNXT
	DEFB	"CALLING CLOSE ENT.",$D,$A,0
	ENDIF
	PUSH	IX
	CALL	TPA+$C
	CALL	FLCLOSE_HOOK
	POP	IX
	XOR	A
	LD	(TPA),A
	RET
;
NOTDRV:	;AS NOT AVAILABLE DRIVE
ILLMOD:	LD	E,1
	DEFB	$01
	IF	0
FTNERR:	LD	E,2
	DEFB	$01
	ENDIF
DIRFUL:	LD	E,3
	DEFB	$01
DSKFUL:	LD	E,4
	DEFB	$01
IFNERR:	LD	E,5
	DEFB	$01
IPEERR:	LD	E,6
	DEFB	$01
EXSERR:	LD	E,7
	DEFB	$01
FNFERR:	LD	E,8
	DEFB	$01
SRVERR:	LD	E,9
	DEFB	$01
PRTERR:	LD	E,10
	DEFB	$01
PHYERR:	LD	E,11
; DEFB $01
;BADFRM:LD E,12
;
ERRCOM:	XOR	A
	LD	(ERRCNT),A
	LD	A,E
	LD	(ERRCODE),A
	KEEP	AF
	SRV	RESET
	CALL	PRCRLF
	KEEPOUT
	LD	HL,ERMTOP
	LD	BC,0
	CPIR
	SRV	CPRSTR
	SRV	CPRNXT
	DEFB	" Error!",7,$D,$A,0
	JP	START
;
ERMTOP:	DEFB	1,"I/O mode",0
	IF	0
	DEFB	2,"File Attr not Match",0 ;"File Attribute not Match",0
	ENDIF
	DEFB	3,"Directory Full",0
	DEFB	4,"Disk full",0
	DEFB	5,"Illegal File Name",0
	DEFB	6,"Input Past End",0
	DEFB	7,"File already exist",0
	DEFB	8,"File not Found",0
	DEFB	9,"SRV",0
	DEFB	10,"Protected",0
	DEFB	11,"Disk I/O",0
; DEFB 12,"BAD FORMAT",0
;
;
	IF	DEBUG
TRAP:	LD	A,$20
	OUT	($40),A
	LD	A,"*"
	LD	($F300),A
	JR	TRAP
	ENDIF
;
;"including disk routines
	INCLUDE	dl
;
;"including Kernel-1
	INCLUDE	kern1
;
SYSBFS:	DEFB	2048/256
CIFCB:	DEFW	CINFCB
COFCB:	DEFW	COUTFCB
FATTOP:	DEFW	0
;
;"DOS working area
WK:	DEFS	2
XWK:	DEFS	2
WWK:	DEFS	2
;
SA:	DEFS	2
EA:	DEFS	2
OF:	DEFS	2
;
DIRCNT:	DEFS	1
DIRSEC:	DEFS	1
DIRNUM:	DEFS	1
KPDP:	DEFS	3
;
RDMFFF:	DEFS	1
ATRKEEP:	DEFS	1
;
FATFLG:	DEFS	4
;
CFCB	EQU	$5C
CFCB2:	DEFS	36
CINFCB:	DEFS	36
COUTFCB:	DEFS	36
;
REDCINBUF:	DEFS	256
REDCOUTBUF:	DEFS	256
;
ZZZZZZ:
	END
;
