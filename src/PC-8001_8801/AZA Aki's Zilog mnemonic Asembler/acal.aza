; acal1
;  Expression calclater for AZA
;            old verion (1983)
;  EXPANDED DEC.1984  FOR AZA V3.0
;      ( AND,OR,XOR,NOT,SHR,SHL,MOD,LOW,HIGH,([{}]) 
;        .AND.,.OR.,.XOR.,.MOD.   )
;  EXPAND & DEBUF SEP.1985  FOR AZA V3.3
;      ( added  <,>,=,<>,<=,.... )
;      ( debuged twoop YUUSEN JUNI )
;
MULT:	PUSH	BC
	PUSH	AF
	LD	B,$10
	LD	C,D
	LD	A,E
	EX	DE,HL
	LD	HL,0
MUL10:	SRA	C
	RRA
	JR	NC,MUL20
	ADD	HL,DE
MUL20:	SLA	E
	RL	D
	DJNZ	MUL10
	POP	AF
	POP	BC
	RET
;
;ANS: HL:ANS,DE:AMARI
DIV:    PUSH    BC
	PUSH	AF
	LD	C,L
	LD	B,H
	LD	HL,0
	LD	A,$10
DIV10:	SLA	C
	RL	B
	RL	L
	RL	H
	OR	A
	SBC	HL,DE
	JR	NC,DIV20
	ADD	HL,DE
	JR	DIV30
DIV20:	SET	0,C
DIV30:	DEC	A
	JR	NZ,DIV10
	EX	DE,HL
	LD	H,B
	LD	L,C
	POP	AF
	POP	BC
	RET
;
EXPRE2X:
	LD	A,1
	LD	(CALMODE),A
	JR	EXP50
EXPRES:
;"output:HL value
	CALL	SSKIP_WSR
EXPRE2:	LD	A,1		;XOR A
	LD	(CALMODE),A
EXP50:	LD	A,(CURLEV)
	PUSH	AF
	LD	A,1
	LD	(CURLEV),A
	CALL	ANUM
EXP60:	CALL	EXPTWO
	LD	IY,(LAST_PTR)
	LD	A,E
	INC	A
	JR	NZ,EXP60
	POP	AF
	LD	(CURLEV),A
	RET
;
;
EXPTWO:	PUSH	HL		;AS ENTRY OF TWOOP
	CALL	CHKTWO		;ANS IN DE(D:PR,E:CODE)
	POP	HL
	RET	C
;
EXPRECU:	
EXP200:	PUSH	HL
	PUSH	DE
	CALL	ANUMX
	EX	(SP),HL
	PUSH	HL
	CALL	CHKTWO
	POP	BC
	JR	C,DO_IT
;
	LD	A,(CURLEV)
	CP	D
	JR	NC,DO_IT
;
	LD	A,B		;COMPAIR PRIORITY
	CP	D
	JR	NC,DO_IT
;
	POP	HL
	PUSH	BC
	LD	A,(CURLEV)
	PUSH	AF
	LD	A,B
	LD	(CURLEV),A
	CALL	EXPRECU		;RECURSION CALL
	POP	AF
	LD	(CURLEV),A
	POP	BC
	PUSH	HL
;
DO_IT:	LD	L,C
	LD	H,0
	ADD	HL,HL
	LD	BC,TWOOPVCT
	ADD	HL,BC
	LD	C,(HL+)
	LD	B,(HL)
	LD	(TWO_DO_IT),BC
	EX	DE,HL
        POP     DE
	EX	(SP),HL
TWO_DO_IT	EQU	$+1
	JP	0
;
EXP300:	POP	DE
	LD	A,(CURLEV)
	SUB	D
	JP	C,EXP200
	RET
;
TWOOPVCT:	
	DEFW	TMULT,TDIV,TDIV,TMOD
	DEFW	TPLUS,TMINUS
	DEFW	TLOW,THIGH,TEQUAL,TNEQ,TLS,THS
	DEFW	TAND,TOR,TXOR
;
TMULT:	CALL	MULT
	JP	EXP300
;
TDIV:	CALL	DIV
	JP	EXP300
;
TMOD:	CALL	DIV
	EX	DE,HL
	JP	EXP300
;
TPLUS:	ADD	HL,DE
	JP	EXP300
;
TMINUS:	OR	A
	SBC	HL,DE
	JP	EXP300
;
THIGH:	OR	A
	SBC	HL,DE
	JR	C,ATRUE
	JR	AFALSE
;
TLOW:	OR	A
	SBC	HL,DE
	JR	C,AFALSE
	JR	Z,AFALSE
	JR	ATRUE
;
TEQUAL:	OR	A
	SBC	HL,DE
	JR	Z,ATRUE
	JR	AFALSE
;
TNEQ:	OR	A
	SBC	HL,DE
	JR	NZ,ATRUE
	JR	AFALSE
;
TLS:	OR	A
	SBC	HL,DE
	JR	NC,ATRUE
	JR	AFALSE
;
THS:	OR	A
	SBC	HL,DE
	JR	C,ATRUE
	JR	Z,ATRUE
;        JR      AFALSE
;
AFALSE:	LD	HL,$FFFF
	JP	EXP300
ATRUE:	LD	HL,0
	JP	EXP300
;
TAND:	LD	A,L
	AND	E
	LD	L,A
	LD	A,H
	AND	D
	LD	H,A
	JP	EXP300
;
TOR:	LD	A,L
	OR	E
	LD	L,A
	LD	A,H
	OR	D
	LD	H,A
	JP	EXP300
;
TXOR:	LD	A,L
	XOR	E
	LD	L,A
	LD	A,H
	XOR	D
	LD	H,A
	JP	EXP300
;
;
CHKTWO:	CALL	SSKIP
	LD	(LAST_PTR),IY
	CALL	WSR
	JR	C,CHT10
	LD	A,C
	CP	"+"
	JR	Z,CT2PLUS
	CP	"-"
	JR	Z,CT2MINUS
	CP	"*"
	JR	Z,CT2ASTAR
	CP	"/"
	JR	Z,CT2SLASH
	CP	"<"
	JR	C,CHT100
	CP	">"+1
	JR	C,CHTCOND
CHT100:	LD	DE,$00FF
	SCF
	RET
;
CT2PLUS:	
	LD	DE,$0604
	RET
;
CT2MINUS:	
	LD	DE,$0605
	RET
;
CT2ASTAR:	
	LD	DE,$0900
	RET
;
CT2SLASH:	
	LD	DE,$0901
	RET
;
CHT10:	LD	A,C
	CP	132		;".AND."
	JR	Z,CT2AND
	CP	18		;"AND"
	JR	Z,CT2AND
	CP	133		;".OR."
	JR	Z,CT2OR
	CP	19		;"OR"
	JR	Z,CT2OR
	CP	134		;".XOR."
	JR	Z,CT2XOR
	CP	20		;"XOR"
	JR	Z,CT2XOR
	CP	131		;".MOD."
	JR	Z,CT2MOD
	CP	126		;"MOD"
	JP	NZ,ILLOPR
;
CT2MOD:	LD	DE,$0703
	RET
;
CT2AND:	LD	DE,$030C
	RET
;
CT2OR:	LD	DE,$020D
	RET
;
CT2XOR:	LD	DE,$010E
	RET
;
CHTCOND:	
	LD	E,0
CHTC05:	CALL	SETCOND
	LD	A,D
	OR	E
	LD	E,A
	LD	A,(IY+0)
	CP	"<"
	JR	C,CHTC10
	CP	"<"+1
	JR	NC,CHTC10
	INC	IY
	JR	CHTC05
;
CHTC10:	LD	A,E
	LD	D,5
	CP	4
	LD	E,6
	RET	Z
	CP	1
	LD	E,7
	RET	Z
	CP	2
	LD	E,8
	RET	Z
	CP	%101
	LD	E,9
	RET	Z
	CP	%110
	LD	E,10
	RET	Z
	CP	%011
	LD	E,11
	RET	Z
	JP	ILLCND
;
SETCOND:	
	LD	D,1
	CP	"<"
	RET	Z
	LD	D,2
	CP	"="
	RET	Z
	LD	D,4
	RET
;
;
ANUM:	LD	A,B
	OR	A
	JP	NZ,ANMLBL
	JR	ANUMCOM
;
ANUMX:	CALL	SSKIP_WSR
	JP	C,ANMLBL
ANUMCOM:	
	LD	A,C
	CP	"$"
	JR	Z,CHEX
	CALL	TEST09
	JR	NC,CDEC
	CP	34
	JP	Z,CASC
	CP	"'"
	JP	Z,CASC
	CP	"("
	JP	Z,CKAKKO
	CP	"["
	JP	Z,CKAKKO
	CP	"{"
	JP	Z,CKAKKO
        CP      "%"
	JP	Z,CBIN
	CP	"-"
	JP	Z,CNEGAT
	CP	"+"
	JP	Z,CPLUS
	CP	"*"
	JP	Z,CREFER
	JP	ILLNUM
;
CDEC:	SUB	$30
	LD	L,A
	LD	H,0
	LD	B,0
	LD	(PTRKEEP),IY
CDEC10:	LD	A,(IY+0)
	LD	C,A
	CALL	TESTAZ
	JR	NC,CHEXOPT
	CALL	TEST09
	RET	C
	INC	IY
	LD	E,L
	LD	D,H
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,HL
	SUB	$30
	LD	E,A
	LD	D,0
	ADD	HL,DE
	JR	CDEC10
;
CHEXOPT:
	LD	IY,(PTRKEEP)
	DEC	IY
	CALL	CHEX
	LD	A,(IY+0)
	CP	"H"
	JP	NZ,ILLNUM
	INC	IY
	RET
;
CHEX:	LD	A,(IY+0)
	CALL	UPPER
	SUB	$30
	CP	10
	JR	C,CHEX05
	SUB	$10-9
	CP	16
	LD	HL,(REFER)
	RET	NC
CHEX05:	INC	IY
;
	LD	L,A
	LD	H,0
CHEX10:	LD	A,(IY+0)
	CALL	UPPER
	SUB	$30
	CP	10
	JR	C,CHEX20
	SUB	$10-9
	CP	16
	RET	NC
CHEX20:	INC	IY
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	E,A
	LD	D,0
	ADD	HL,DE
	JR	CHEX10
;
CPLUS:	CALL	CHKCM
	JP	ANUMX
;
CNEGAT: CALL    CHKCM
	CALL	ANUMX
	EX	DE,HL
	LD	HL,0
	OR	A
	SBC	HL,DE
	RET
;
CBIN:	LD	HL,0
CBIN10:	LD	A,(IY+0)
	CP	"$"
	JR	NZ,CBIN12
	INC	IY
	JR	CBIN10
CBIN12:	SUB	$30
	CP	2
	RET	NC
	INC	IY
	ADD	HL,HL
	LD	E,A
	LD	D,0
	ADD	HL,DE
	JR	CBIN10
;
CASC:	CP	(IY+1)
	JP	NZ,TRMMIS
	LD	L,(IY+0)
	LD	H,0
	INC	IY
	INC	IY
	RET
;
CREFER:	LD	HL,(REFER)
	RET
;
CCOMPL:	;FOR WORD OF NOT
	CALL	ANUMX
	LD	A,L
	CPL
	LD	L,A
	LD	A,H
	CPL
	LD	H,A
	RET
;
CKAKKO:	CALL	SSKIP_WSR
	CALL	EXP50
	LD	A,(IY+0)
	INC	IY
	CP	")"
	RET	Z
	CP	"]"
	RET	Z
	CP	"}"
	RET	Z
	JP	ILLKAK
;
CHIGHBYT:	
	CALL	ANUMX
	LD	L,H
	LD	H,0
	RET
;
CLOWBYT:	
	CALL	ANUMX
	LD	H,0
	RET
;
CSHRIGHT:	
	CALL	ANUMX
	SRL	H
	RR	L
	RET
;
CSHLEFT:	
	CALL	ANUMX
	SLA	L
	RL	H
	RET
;
ANMLBL:	
; HL:label value if pass 2,if pass1 then skip
	LD	A,C
	CP	$F1		;LABEL ?
	JR	NZ,ANLERR	;IF NOT LABEL
	LD	A,(CRFFLG)	;OK THEN GET LABEL VALUE
	OR	A
	CALL	NZ,PUTNAM
	LD	HL,(VALUE)
	RET
;
ANLERR:	CP	123		;FIXED NAME OF NOT
	JR	Z,CCOMPL
	CP	124
	JR	Z,CLOWBYT
	CP	125
	JR	Z,CHIGHBYT
	CP	127
	JR	Z,CSHRIGHT
	CP	128
	JR	Z,CSHLEFT
	LD	A,(EQUFLG)
	OR	A
	JR	Z,ANLER20
	INC	B
	JP	Z,UNDLBL
	JP	ILLOPR
ANLER20:	
	LD	A,(PASS)
	CP	1
	RET	Z		;OK! WHEN PASS 1
	INC	B
        JP      Z,UDFLBL
	JP	ILLOPR
;
CHKCM:	LD	A,(CALMODE)	;CHECK FOR PRE+,-
	OR	A
	RET	NZ
	JP	ILLOPR
;
;
CURLEV:	DB	0
LAST_PTR:	DW	0
;
; END OF INCLUDED MODULE 'acal.aza'
